import{S as es,i as os,s as ps,l as C,r as p,a as V,w as x,m as E,n as f,u as t,h as o,c as X,x as q,b as i,M as e,y as G,v as ts,f as N,t as O,B as R,_ as rs}from"../../chunks/index-6391be64.js";import{f as Bs}from"../../chunks/scroll-4f99ad69.js";import{C as as}from"../../chunks/CodeFence-e0140bb4.js";import{L as ls}from"../../chunks/Link-69c668c2.js";import"../../chunks/singletons-9fd4729a.js";import"../../chunks/contexts-c56b72f8.js";function cs(F){let n;return{c(){n=p("Server Sent Events (SSE)")},l(a){n=t(a,"Server Sent Events (SSE)")},m(a,r){i(a,n,r)},d(a){a&&o(n)}}}function ys(F){let n;return{c(){n=p("good read")},l(a){n=t(a,"good read")},m(a,r){i(a,n,r)},d(a){a&&o(n)}}}function is(F){let n,a=F[0].title+"",r,h,B,A,j,v,P,H,$,L,U,k,d,u,W,b,z,M,I,g,c,Y,_,J,K,m,Q,w;return A=new ls({props:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events",target:"_blank",rel:"noopener noreferrer",$$slots:{default:[cs]},$$scope:{ctx:F}}}),d=new as({props:{lang:"csharp",ext:"cs",linesCount:26,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">EventStream</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">EndpointWithoutRequest</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Get</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;event-stream&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">AllowAnonymous</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Options</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">x</span><span style="color: #ABB2BF"> =&gt; </span><span style="color: #E5C07B">x</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">RequireCors</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF"> =&gt; </span><span style="color: #E5C07B">p</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">AllowAnyOrigin</span><span style="color: #ABB2BF">()));</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #7F848E; font-style: italic">//simply provide any IAsyncEnumerable&lt;T&gt; as argument</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">SendEventStream</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;my-event&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #61AFEF">GetDataStream</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">ct</span><span style="color: #ABB2BF">), </span><span style="color: #E06C75">ct</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">private</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">IAsyncEnumerable</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">object</span><span style="color: #ABB2BF">&gt; </span><span style="color: #61AFEF">GetDataStream</span><span style="color: #ABB2BF">(</span></span>
<span class="line"><span style="color: #ABB2BF">      [</span><span style="color: #E5C07B">EnumeratorCancellation</span><span style="color: #ABB2BF">] </span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">cancellation</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">while</span><span style="color: #ABB2BF"> (</span><span style="color: #56B6C2">!</span><span style="color: #E5C07B">cancellation</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">IsCancellationRequested</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">Delay</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1000</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">yield</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75">guid</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Guid</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">NewGuid</span><span style="color: #ABB2BF">() };</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),g=new as({props:{lang:"html",ext:"html",linesCount:13,code:`<pre><code><span class="line"><span style="color: #ABB2BF">&lt;!</span><span style="color: #E06C75">DOCTYPE</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">html</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">&lt;</span><span style="color: #E06C75">html</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">	&lt;</span><span style="color: #E06C75">head</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">		&lt;</span><span style="color: #E06C75">meta</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">charset</span><span style="color: #ABB2BF">=</span><span style="color: #98C379">&quot;utf-8&quot;</span><span style="color: #ABB2BF"> /&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">	&lt;/</span><span style="color: #E06C75">head</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">	&lt;</span><span style="color: #E06C75">body</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">		&lt;</span><span style="color: #E06C75">script</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">sse</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">EventSource</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&#39;http://localhost:8080/event-stream&#39;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #E5C07B">sse</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">addEventListener</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&#39;my-event&#39;</span><span style="color: #ABB2BF">, (</span><span style="color: #E06C75; font-style: italic">e</span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">console</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">log</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">e</span><span style="color: #ABB2BF">.</span><span style="color: #E06C75">data</span><span style="color: #ABB2BF">));</span></span>
<span class="line"><span style="color: #ABB2BF">		&lt;/</span><span style="color: #E06C75">script</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">	&lt;/</span><span style="color: #E06C75">body</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">&lt;/</span><span style="color: #E06C75">html</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"></span></code></pre>`}}),m=new ls({props:{href:"https://ordina-jworks.github.io/event-driven/2021/04/23/SSE-with-HTTP2.html",target:"_blank",rel:"noopener noreferrer",$$slots:{default:[ys]},$$scope:{ctx:F}}}),{c(){n=C("h1"),r=p(a),h=V(),B=C("p"),x(A.$$.fragment),j=p(" can be used to push real-time data down to the web browser in an "),v=C("strong"),P=p("async"),H=p(" manner without blocking threads using the "),$=C("strong"),L=p("IAsyncIEnumerable"),U=p(" interface like so:"),k=V(),x(d.$$.fragment),u=C("p"),W=p("In the browser, the event stream can be subscribed to and consumed using the "),b=C("strong"),z=p("EventSource"),M=p(" object like so:"),I=V(),x(g.$$.fragment),c=C("p"),Y=p("If you are planning to create more than a handful of server-sent-event streams, it's a good idea to enable "),_=C("strong"),J=p("http2"),K=p(" in kestrel and all upstream servers such as reverse proxies and CDNs so that data can be multiplexed between the web server and client using a low number of tcp connections. here's a "),x(m.$$.fragment),Q=p(" on the subject.")},l(s){n=E(s,"H1",{});var l=f(n);r=t(l,a),l.forEach(o),h=X(s),B=E(s,"P",{});var y=f(B);q(A.$$.fragment,y),j=t(y," can be used to push real-time data down to the web browser in an "),v=E(y,"STRONG",{});var S=f(v);P=t(S,"async"),S.forEach(o),H=t(y," manner without blocking threads using the "),$=E(y,"STRONG",{});var Z=f($);L=t(Z,"IAsyncIEnumerable"),Z.forEach(o),U=t(y," interface like so:"),y.forEach(o),k=X(s),q(d.$$.fragment,s),u=E(s,"P",{});var T=f(u);W=t(T,"In the browser, the event stream can be subscribed to and consumed using the "),b=E(T,"STRONG",{});var ss=f(b);z=t(ss,"EventSource"),ss.forEach(o),M=t(T," object like so:"),T.forEach(o),I=X(s),q(g.$$.fragment,s),c=E(s,"P",{});var D=f(c);Y=t(D,"If you are planning to create more than a handful of server-sent-event streams, it's a good idea to enable "),_=E(D,"STRONG",{});var ns=f(_);J=t(ns,"http2"),ns.forEach(o),K=t(D," in kestrel and all upstream servers such as reverse proxies and CDNs so that data can be multiplexed between the web server and client using a low number of tcp connections. here's a "),q(m.$$.fragment,D),Q=t(D," on the subject."),D.forEach(o)},m(s,l){i(s,n,l),e(n,r),i(s,h,l),i(s,B,l),G(A,B,null),e(B,j),e(B,v),e(v,P),e(B,H),e(B,$),e($,L),e(B,U),i(s,k,l),G(d,s,l),i(s,u,l),e(u,W),e(u,b),e(b,z),e(u,M),i(s,I,l),G(g,s,l),i(s,c,l),e(c,Y),e(c,_),e(_,J),e(c,K),G(m,c,null),e(c,Q),w=!0},p(s,[l]){(!w||l&1)&&a!==(a=s[0].title+"")&&ts(r,a);const y={};l&2&&(y.$$scope={dirty:l,ctx:s}),A.$set(y);const S={};l&2&&(S.$$scope={dirty:l,ctx:s}),m.$set(S)},i(s){w||(N(A.$$.fragment,s),N(d.$$.fragment,s),N(g.$$.fragment,s),N(m.$$.fragment,s),w=!0)},o(s){O(A.$$.fragment,s),O(d.$$.fragment,s),O(g.$$.fragment,s),O(m.$$.fragment,s),w=!1},d(s){s&&o(n),s&&o(h),s&&o(B),R(A),s&&o(k),R(d,s),s&&o(u),s&&o(I),R(g,s),s&&o(c),R(m)}}}function Fs(F,n,a){let r;return rs(F,Bs,h=>a(0,r=h)),[r]}class ds extends es{constructor(n){super(),os(this,n,Fs,is,ps,{})}}export{ds as default};
