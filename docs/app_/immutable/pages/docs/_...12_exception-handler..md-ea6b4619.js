import{S as is,i as cs,s as Bs,l as F,r,a as A,w as h,m as E,n as x,u as i,h as l,c as C,x as _,p as g,b as t,M as v,y as b,v as us,f as q,t as w,B as S,_ as fs}from"../../chunks/index-6391be64.js";import{f as ds}from"../../chunks/scroll-4f99ad69.js";import{C as Q}from"../../chunks/CodeFence-e0140bb4.js";import{L as X}from"../../chunks/Link-69c668c2.js";import"../../chunks/singletons-9fd4729a.js";import"../../chunks/contexts-c56b72f8.js";function ys(o){let a;return{c(){a=r("#")},l(e){a=i(e,"#")},m(e,p){t(e,a,p)},d(e){e&&l(a)}}}function $s(o){let a;return{c(){a=r("#")},l(e){a=i(e,"#")},m(e,p){t(e,a,p)},d(e){e&&l(a)}}}function ms(o){let a;return{c(){a=r("#")},l(e){a=i(e,"#")},m(e,p){t(e,a,p)},d(e){e&&l(a)}}}function Fs(o){let a;return{c(){a=r("#")},l(e){a=i(e,"#")},m(e,p){t(e,a,p)},d(e){e&&l(a)}}}function As(o){let a,e=o[0].title+"",p,k,c,d,Z,z,j,ss,V,B,y,ns,W,T,u,$,es,I,H,f,m,as,Y,J,ls,G,P,N,ts,K,D,M;return d=new X({props:{class:"header-anchor",href:"#unhandled-exception-handler","aria-hidden":"true",$$slots:{default:[ys]},$$scope:{ctx:o}}}),y=new X({props:{class:"header-anchor",href:"#example-json-response","aria-hidden":"true",$$slots:{default:[$s]},$$scope:{ctx:o}}}),T=new Q({props:{title:"response.json",lang:"json",ext:"json",linesCount:7,code:`<pre><code><span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">&quot;Status&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&quot;Internal Server Error!&quot;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">&quot;Code&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">500</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">&quot;Reason&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&quot;&#39;x&#39; is an invalid start of a value. Path: $.ValMin | LineNumber: 4...&quot;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">&quot;Note&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&quot;See application log for stack trace.&quot;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),$=new X({props:{class:"header-anchor",href:"#example-server-log-entry","aria-hidden":"true",$$slots:{default:[ms]},$$scope:{ctx:o}}}),H=new Q({props:{lang:"text",ext:"text",linesCount:11,code:`<pre><code><span class="line"><span style="color: undefined">fail: FastEndpoints.ExceptionHandler[0]</span></span>
<span class="line"><span style="color: undefined">      =================================</span></span>
<span class="line"><span style="color: undefined">      HTTP: POST /inventory/adjust-stock</span></span>
<span class="line"><span style="color: undefined">      TYPE: JsonException</span></span>
<span class="line"><span style="color: undefined">      REASON: &#39;x&#39; is an invalid start of a value. Path: $.ValMin | LineNumber: 4...</span></span>
<span class="line"><span style="color: undefined">      ---------------------------------</span></span>
<span class="line"><span style="color: undefined">         at System.Text.Json.ThrowHelper.ReThrowWithPath(ReadStack&amp; state,...</span></span>
<span class="line"><span style="color: undefined">         at System.Text.Json.Serialization.JsonConverter\`1.ReadCore(Utf8JsonReader&amp; reader,...</span></span>
<span class="line"><span style="color: undefined">         at System.Text.Json.JsonSerializer.ReadCore[TValue](JsonConverter jsonConverter,...</span></span>
<span class="line"><span style="color: undefined">         ...</span></span>
<span class="line"><span style="color: undefined"></span></span></code></pre>`}}),m=new X({props:{class:"header-anchor",href:"#enabling-the-exception-handler","aria-hidden":"true",$$slots:{default:[Fs]},$$scope:{ctx:o}}}),P=new Q({props:{title:"Program.cs",lang:"csharp",ext:"cs",linesCount:9,code:`<pre><code><span class="line"><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">builder</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">WebApplication</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">CreateBuilder</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E5C07B">builder</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Services</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">AddFastEndpoints</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">app</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">builder</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">Build</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E5C07B">app</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">UseDefaultExceptionHandler</span><span style="color: #ABB2BF">(); </span><span style="color: #7F848E; font-style: italic">//add this</span></span>
<span class="line"><span style="color: #E5C07B">app</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">UseAuthorization</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E5C07B">app</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">UseFastEndpoints</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E5C07B">app</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">Run</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span></code></pre>`}}),D=new Q({props:{title:"appsettings.json",lang:"json",ext:"json",linesCount:8,code:`<pre><code><span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">  </span><span style="color: #E06C75">&quot;Logging&quot;</span><span style="color: #ABB2BF">: {</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E06C75">&quot;LogLevel&quot;</span><span style="color: #ABB2BF">: {</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #E06C75">&quot;Default&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&quot;Warning&quot;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">      </span><span style="color: #E06C75">&quot;Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&quot;None&quot;</span><span style="color: #ABB2BF"> </span><span style="color: #7F848E; font-style: italic">//add this</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),{c(){a=F("h1"),p=r(e),k=A(),c=F("h2"),h(d.$$.fragment),Z=r(" Unhandled Exception Handler"),z=A(),j=F("p"),ss=r("The library ships with a default exception handler middleware you can use to log the exception details on the server and return a user-friendly HTTP 500 response to the requesting client."),V=A(),B=F("h2"),h(y.$$.fragment),ns=r(" Example JSON Response:"),W=A(),h(T.$$.fragment),u=F("h2"),h($.$$.fragment),es=r(" Example Server Log Entry:"),I=A(),h(H.$$.fragment),f=F("h2"),h(m.$$.fragment),as=r(" Enabling The Exception Handler"),Y=A(),J=F("p"),ls=r("Enable the middleware as shown below during app startup."),G=A(),h(P.$$.fragment),N=F("p"),ts=r("Disable the ASP.NET Core Diagnostic logging for unhandled exceptions in order to avoid duplicate log entries."),K=A(),h(D.$$.fragment),this.h()},l(s){a=E(s,"H1",{});var n=x(a);p=i(n,e),n.forEach(l),k=C(s),c=E(s,"H2",{id:!0,tabindex:!0});var R=x(c);_(d.$$.fragment,R),Z=i(R," Unhandled Exception Handler"),R.forEach(l),z=C(s),j=E(s,"P",{});var O=x(j);ss=i(O,"The library ships with a default exception handler middleware you can use to log the exception details on the server and return a user-friendly HTTP 500 response to the requesting client."),O.forEach(l),V=C(s),B=E(s,"H2",{id:!0,tabindex:!0});var L=x(B);_(y.$$.fragment,L),ns=i(L," Example JSON Response:"),L.forEach(l),W=C(s),_(T.$$.fragment,s),u=E(s,"H2",{id:!0,tabindex:!0});var U=x(u);_($.$$.fragment,U),es=i(U," Example Server Log Entry:"),U.forEach(l),I=C(s),_(H.$$.fragment,s),f=E(s,"H2",{id:!0,tabindex:!0});var ps=x(f);_(m.$$.fragment,ps),as=i(ps," Enabling The Exception Handler"),ps.forEach(l),Y=C(s),J=E(s,"P",{});var os=x(J);ls=i(os,"Enable the middleware as shown below during app startup."),os.forEach(l),G=C(s),_(P.$$.fragment,s),N=E(s,"P",{});var rs=x(N);ts=i(rs,"Disable the ASP.NET Core Diagnostic logging for unhandled exceptions in order to avoid duplicate log entries."),rs.forEach(l),K=C(s),_(D.$$.fragment,s),this.h()},h(){g(c,"id","unhandled-exception-handler"),g(c,"tabindex","-1"),g(B,"id","example-json-response"),g(B,"tabindex","-1"),g(u,"id","example-server-log-entry"),g(u,"tabindex","-1"),g(f,"id","enabling-the-exception-handler"),g(f,"tabindex","-1")},m(s,n){t(s,a,n),v(a,p),t(s,k,n),t(s,c,n),b(d,c,null),v(c,Z),t(s,z,n),t(s,j,n),v(j,ss),t(s,V,n),t(s,B,n),b(y,B,null),v(B,ns),t(s,W,n),b(T,s,n),t(s,u,n),b($,u,null),v(u,es),t(s,I,n),b(H,s,n),t(s,f,n),b(m,f,null),v(f,as),t(s,Y,n),t(s,J,n),v(J,ls),t(s,G,n),b(P,s,n),t(s,N,n),v(N,ts),t(s,K,n),b(D,s,n),M=!0},p(s,[n]){(!M||n&1)&&e!==(e=s[0].title+"")&&us(p,e);const R={};n&2&&(R.$$scope={dirty:n,ctx:s}),d.$set(R);const O={};n&2&&(O.$$scope={dirty:n,ctx:s}),y.$set(O);const L={};n&2&&(L.$$scope={dirty:n,ctx:s}),$.$set(L);const U={};n&2&&(U.$$scope={dirty:n,ctx:s}),m.$set(U)},i(s){M||(q(d.$$.fragment,s),q(y.$$.fragment,s),q(T.$$.fragment,s),q($.$$.fragment,s),q(H.$$.fragment,s),q(m.$$.fragment,s),q(P.$$.fragment,s),q(D.$$.fragment,s),M=!0)},o(s){w(d.$$.fragment,s),w(y.$$.fragment,s),w(T.$$.fragment,s),w($.$$.fragment,s),w(H.$$.fragment,s),w(m.$$.fragment,s),w(P.$$.fragment,s),w(D.$$.fragment,s),M=!1},d(s){s&&l(a),s&&l(k),s&&l(c),S(d),s&&l(z),s&&l(j),s&&l(V),s&&l(B),S(y),s&&l(W),S(T,s),s&&l(u),S($),s&&l(I),S(H,s),s&&l(f),S(m),s&&l(Y),s&&l(J),s&&l(G),S(P,s),s&&l(N),s&&l(K),S(D,s)}}}function hs(o,a,e){let p;return fs(o,ds,k=>e(0,p=k)),[p]}class bs extends is{constructor(a){super(),cs(this,a,hs,As,Bs,{})}}export{bs as default};
