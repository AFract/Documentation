import{S as Ho,i as Go,s as Io,l as r,r as l,a as y,w as d,m as B,n as c,u as t,h as n,c as f,x as A,p as E,b as o,M as a,y as F,v as Lo,f as $,t as h,B as m,_ as jo,E as zo}from"../../chunks/index-6391be64.js";import{f as Wo}from"../../chunks/scroll-4f99ad69.js";import{C as g}from"../../chunks/CodeFence-e0140bb4.js";import{L as R}from"../../chunks/Link-69c668c2.js";import{A as Uo}from"../../chunks/Admonition-a969bddf.js";import"../../chunks/singletons-9fd4729a.js";import"../../chunks/contexts-c56b72f8.js";function Vo(C){let i;return{c(){i=l("#")},l(p){i=t(p,"#")},m(p,u){o(p,i,u)},d(p){p&&n(i)}}}function Yo(C){let i;return{c(){i=l("#")},l(p){i=t(p,"#")},m(p,u){o(p,i,u)},d(p){p&&n(i)}}}function Jo(C){let i;return{c(){i=l("#")},l(p){i=t(p,"#")},m(p,u){o(p,i,u)},d(p){p&&n(i)}}}function Ko(C){let i;return{c(){i=l("#")},l(p){i=t(p,"#")},m(p,u){o(p,i,u)},d(p){p&&n(i)}}}function Qo(C){let i;return{c(){i=l("#")},l(p){i=t(p,"#")},m(p,u){o(p,i,u)},d(p){p&&n(i)}}}function Xo(C){let i;return{c(){i=l("#")},l(p){i=t(p,"#")},m(p,u){o(p,i,u)},d(p){p&&n(i)}}}function Zo(C){let i;return{c(){i=l("#")},l(p){i=t(p,"#")},m(p,u){o(p,i,u)},d(p){p&&n(i)}}}function sl(C){let i;return{c(){i=l("#")},l(p){i=t(p,"#")},m(p,u){o(p,i,u)},d(p){p&&n(i)}}}function nl(C){let i;return{c(){i=l("#")},l(p){i=t(p,"#")},m(p,u){o(p,i,u)},d(p){p&&n(i)}}}function el(C){let i,p;return{c(){i=r("p"),p=l("An exception will be thrown if you use both or none at all.")},l(u){i=B(u,"P",{});var b=c(i);p=t(b,"An exception will be thrown if you use both or none at all."),b.forEach(n)},m(u,b){o(u,i,b),a(i,p)},p:zo,d(u){u&&n(i)}}}function al(C){let i;return{c(){i=l("#")},l(p){i=t(p,"#")},m(p,u){o(p,i,u)},d(p){p&&n(i)}}}function ol(C){let i,p=C[0].title+"",u,b,bs,he,Tn,T,I,me,kn,ts,k,L,Ce,Nn,_s,Ee,Sn,ps,vs,ge,Pn,rs,N,j,De,On,z,we,Js,be,_e,xn,Bs,S,W,ve,Mn,U,qe,Ks,Re,Te,Hn,cs,P,V,ke,Gn,Y,Ne,Qs,Se,Pe,In,is,O,J,Oe,Ln,K,xe,Xs,Me,He,jn,ys,Q,Ge,Zs,Ie,Le,zn,fs,qs,je,Wn,us,D,ze,sn,We,Ue,nn,Ve,Ye,en,Je,Ke,an,Qe,Xe,Un,X,Ze,on,sa,na,Vn,x,Z,ea,Yn,Rs,aa,Jn,w,ln,Ts,tn,oa,la,ta,pn,ks,rn,pa,ra,Ba,Bn,Ns,cn,ca,ia,ya,yn,Ss,fn,fa,ua,Kn,_,da,un,Aa,Fa,dn,$a,ha,Qn,ds,M,ss,ma,Xn,Ps,Ca,Zn,As,An,Ea,ga,se,Fs,$s,Fn,Da,wa,ne,hs,Os,ba,ee,ms,H,ns,_a,ae,xs,va,oe,v,$n,hn,qa,Ra,mn,Cn,Ta,ka,En,gn,Na,le,es,Sa,Dn,Pa,Oa,te,as,pe,Cs,G,os,xa,re,Ms,Ma,Be,Hs,Ha,ce,Gs,Ga,ie,Es,Is,Ia,ye,Ls,La,fe,gs,wn;return I=new R({props:{class:"header-anchor",href:"#create-a-new-project","aria-hidden":"true",$$slots:{default:[Vo]},$$scope:{ctx:C}}}),ts=new g({props:{lang:"bash",ext:"sh",linesCount:2,rawCode:`  dotnet new web -n MyWebApp
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #ABB2BF">  dotnet new web -n MyWebApp</span></span>
<span class="line"></span></code></pre>`}}),L=new R({props:{class:"header-anchor",href:"#install-nuget-package","aria-hidden":"true",$$slots:{default:[Yo]},$$scope:{ctx:C}}}),ps=new g({props:{lang:"bash",ext:"sh",linesCount:2,rawCode:`  dotnet add package FastEndpoints
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #ABB2BF">  dotnet add package FastEndpoints</span></span>
<span class="line"></span></code></pre>`}}),rs=new g({props:{lang:"bash",ext:"sh",linesCount:2,rawCode:`  Install-Package FastEndpoints
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #ABB2BF">  Install-Package FastEndpoints</span></span>
<span class="line"></span></code></pre>`}}),j=new R({props:{class:"header-anchor",href:"#prepare-setup","aria-hidden":"true",$$slots:{default:[Jo]},$$scope:{ctx:C}}}),Bs=new g({props:{title:"Program.cs",lang:"csharp",ext:"cs",linesCount:10,rawCode:`global using FastEndpoints;

var builder = WebApplication.CreateBuilder();
builder.Services.AddFastEndpoints();

var app = builder.Build();
app.UseAuthorization();
app.UseFastEndpoints();
app.Run();
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #E06C75">global</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">FastEndpoints</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">builder</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">WebApplication</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">CreateBuilder</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E5C07B">builder</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Services</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">AddFastEndpoints</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">app</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">builder</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">Build</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E5C07B">app</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">UseAuthorization</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E5C07B">app</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">UseFastEndpoints</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E5C07B">app</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">Run</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span></code></pre>`}}),W=new R({props:{class:"header-anchor",href:"#add-a-request-dto","aria-hidden":"true",$$slots:{default:[Ko]},$$scope:{ctx:C}}}),cs=new g({props:{title:"MyRequest.cs",lang:"csharp",ext:"cs",linesCount:7,rawCode:`public class MyRequest
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public int Age { get; set; }
}
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyRequest</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> FirstName { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> LastName { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> Age { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),V=new R({props:{class:"header-anchor",href:"#add-a-response-dto","aria-hidden":"true",$$slots:{default:[Qo]},$$scope:{ctx:C}}}),is=new g({props:{title:"MyResponse.cs",lang:"csharp",ext:"cs",linesCount:6,rawCode:`public class MyResponse
{
    public string FullName { get; set; }
    public bool IsOver18 { get; set; }
}
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyResponse</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> FullName { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> IsOver18 { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),J=new R({props:{class:"header-anchor",href:"#add-an-endpoint-definition","aria-hidden":"true",$$slots:{default:[Xo]},$$scope:{ctx:C}}}),ys=new g({props:{title:"MyEndpoint.cs",lang:"csharp",ext:"cs",linesCount:21,rawCode:`public class MyEndpoint : Endpoint<MyRequest>
{
    public override void Configure()
    {
        Verbs(Http.POST);
        Routes("/api/user/create");
        AllowAnonymous();
    }

    public override async Task HandleAsync(MyRequest req, CancellationToken ct)
    {
        var response = new MyResponse()
        {
            FullName = req.FirstName + " " + req.LastName,
            IsOver18 = req.Age > 18
        };

        await SendAsync(response);
    }
}
`,showCopyCode:!0,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyEndpoint</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">Endpoint</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">MyRequest</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Verbs</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">Http</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">POST</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Routes</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/api/user/create&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">AllowAnonymous</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">MyRequest</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">response</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyResponse</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E06C75">FullName</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">FirstName</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&quot; &quot;</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">LastName</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E06C75">IsOver18</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Age</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">18</span></span>
<span class="line"><span style="color: #ABB2BF">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">SendAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">response</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),fs=new g({props:{lang:"json",ext:"json",linesCount:6,code:`<pre><code><span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">&quot;FirstName&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&quot;marlon&quot;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">&quot;LastName&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&quot;brando&quot;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">&quot;Age&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">40</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),us=new g({props:{lang:"json",ext:"json",linesCount:5,code:`<pre><code><span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">&quot;FullName&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&quot;marlon brando&quot;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">&quot;IsOver18&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">true</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),Z=new R({props:{class:"header-anchor",href:"#endpoint-types","aria-hidden":"true",$$slots:{default:[Zo]},$$scope:{ctx:C}}}),ds=new g({props:{lang:"csharp",ext:"cs",linesCount:2,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyEndpoint</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">Endpoint</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">EmptyRequest</span><span style="color: #ABB2BF">,</span><span style="color: #E5C07B">EmptyResponse</span><span style="color: #ABB2BF">&gt; { }</span></span>
<span class="line"></span></code></pre>`}}),ss=new R({props:{class:"header-anchor",href:"#sending-responses","aria-hidden":"true",$$slots:{default:[sl]},$$scope:{ctx:C}}}),Fs=new g({props:{lang:"csharp",ext:"cs",linesCount:6,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyResponse</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> FullName { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> Age { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),hs=new g({props:{lang:"csharp",ext:"cs",linesCount:17,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyEndpoint</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">EndpointWithoutRequest</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">MyResponse</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Get</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/api/person&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">AllowAnonymous</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">person</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">dbContext</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">GetFirstPersonAsync</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">Response</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">FullName</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">person</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">FullName</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">Response</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Age</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">person</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Age</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),ms=new g({props:{lang:"csharp",ext:"cs",linesCount:10,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E06C75">Response</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">new</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E06C75">FullName</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&quot;john doe&quot;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E06C75">Age</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">124</span></span>
<span class="line"><span style="color: #ABB2BF">    };</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">CompletedTask</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),ns=new R({props:{class:"header-anchor",href:"#configuring-endpoints-using-attributes","aria-hidden":"true",$$slots:{default:[nl]},$$scope:{ctx:C}}}),as=new Uo({props:{type:"warning",$$slots:{default:[el]},$$scope:{ctx:C}}}),Cs=new g({props:{lang:"csharp",ext:"cs",linesCount:10,code:`<pre><code><span class="line"><span style="color: #ABB2BF">[</span><span style="color: #E5C07B">HttpPost</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/my-endpoint&quot;</span><span style="color: #ABB2BF">)]</span></span>
<span class="line"><span style="color: #ABB2BF">[</span><span style="color: #E5C07B">Authorize</span><span style="color: #ABB2BF">(Roles </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&quot;Admin,Manager&quot;</span><span style="color: #ABB2BF">)]</span></span>
<span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">UpdateAddress</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">Endpoint</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">MyRequest</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">MyResponse</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">MyRequest</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">SendAsync</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyResponse</span><span style="color: #ABB2BF"> { });</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),os=new R({props:{class:"header-anchor",href:"#cancellation-token","aria-hidden":"true",$$slots:{default:[al]},$$scope:{ctx:C}}}),Es=new g({props:{lang:"csharp",ext:"cs",linesCount:2,code:`<pre><code><span class="line"><span style="color: #ABB2BF">  </span><span style="color: #E5C07B">await</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">SendAsync</span><span style="color: #ABB2BF">(response, cancellation: ct);</span></span>
<span class="line"></span></code></pre>`}}),gs=new g({props:{lang:"xml",ext:"xml",linesCount:2,code:`<pre><code><span class="line"><span style="color: #ABB2BF">  &lt;</span><span style="color: #E06C75">NoWarn</span><span style="color: #ABB2BF">&gt;CA2016&lt;/</span><span style="color: #E06C75">NoWarn</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"></span></code></pre>`}}),{c(){i=r("h1"),u=l(p),b=y(),bs=r("p"),he=l("Follow the steps below to create your first endpoint that will handle an http post request and send a response back to the client."),Tn=y(),T=r("h2"),d(I.$$.fragment),me=l(" Create a New Project"),kn=y(),d(ts.$$.fragment),k=r("h2"),d(L.$$.fragment),Ce=l(" Install Nuget Package"),Nn=y(),_s=r("p"),Ee=l("Install the latest library version using the following cli command:"),Sn=y(),d(ps.$$.fragment),vs=r("p"),ge=l("or with Nuget package manager:"),Pn=y(),d(rs.$$.fragment),N=r("h2"),d(j.$$.fragment),De=l(" Prepare Setup"),On=y(),z=r("p"),we=l("Replace the contents of "),Js=r("strong"),be=l("Program.cs"),_e=l(" file with the following:"),xn=y(),d(Bs.$$.fragment),S=r("h2"),d(W.$$.fragment),ve=l(" Add a Request DTO"),Mn=y(),U=r("p"),qe=l("Create a file called "),Ks=r("strong"),Re=l("MyRequest.cs"),Te=l(" and add the following:"),Hn=y(),d(cs.$$.fragment),P=r("h2"),d(V.$$.fragment),ke=l(" Add a Response DTO"),Gn=y(),Y=r("p"),Ne=l("Create a file called "),Qs=r("strong"),Se=l("MyResponse.cs"),Pe=l(" and add the following:"),In=y(),d(is.$$.fragment),O=r("h2"),d(J.$$.fragment),Oe=l(" Add an Endpoint Definition"),Ln=y(),K=r("p"),xe=l("create a file called "),Xs=r("strong"),Me=l("MyEndpoint.cs"),He=l(" and add the following:"),jn=y(),d(ys.$$.fragment),Q=r("p"),Ge=l("Now run your web app and send a POST request to the "),Zs=r("strong"),Ie=l("/api/user/create"),Le=l(" endpoint using a REST client such as postman with the following request body:"),zn=y(),d(fs.$$.fragment),qs=r("p"),je=l("You should then get a response back such as this:"),Wn=y(),d(us.$$.fragment),D=r("p"),ze=l("That's all there's to it. you simply configure how the endpoint should be listening to incoming requests from clients in the "),sn=r("strong"),We=l("Configure()"),Ue=l(" section calling methods such as "),nn=r("strong"),Ve=l("Verbs()"),Ye=l(", "),en=r("strong"),Je=l("Routes()"),Ke=l(", "),an=r("strong"),Qe=l("AllowAnonymous()"),Xe=l(", etc. then you override the HandleAsync() method in order to specify your handling logic."),Un=y(),X=r("p"),Ze=l(`The request dto is automatically populated from the JSON body of your http request and passed in to the handler.
When you're done processing, you call the `),on=r("strong"),sa=l("SendAsync()"),na=l(" method with a new response dto to be sent to the requesting client."),Vn=y(),x=r("h2"),d(Z.$$.fragment),ea=l(" Endpoint Types"),Yn=y(),Rs=r("p"),aa=l("There are 4 different endpoint base types you can inherit from."),Jn=y(),w=r("ol"),ln=r("li"),Ts=r("p"),tn=r("strong"),oa=l("Endpoint<TRequest>"),la=l(" - use this type if there's only a request dto. you can however send any object to the client that can be serialized as a response with this generic overload."),ta=y(),pn=r("li"),ks=r("p"),rn=r("strong"),pa=l("Endpoint<TRequest,TResponse>"),ra=l(" - use this type if you have both request and response dtos. the benefit of this generic overload is that you get strongly-typed access to properties of the dto when doing integration testing and validations."),Ba=y(),Bn=r("li"),Ns=r("p"),cn=r("strong"),ca=l("EndpointWithoutRequest"),ia=l(" - use this type if there's no request nor response dto. you can send any serializable object as a response here also."),ya=y(),yn=r("li"),Ss=r("p"),fn=r("strong"),fa=l("EndpointWithoutRequest<TResponse>"),ua=l(" - use this type if there's no request dto but there is a response dto."),Kn=y(),_=r("p"),da=l("It is also possible to define endpoints with "),un=r("strong"),Aa=l("EmptyRequest"),Fa=l(" and "),dn=r("strong"),$a=l("EmptyResponse"),ha=l(" if needed like so:"),Qn=y(),d(ds.$$.fragment),M=r("h2"),d(ss.$$.fragment),ma=l(" Sending Responses"),Xn=y(),Ps=r("p"),Ca=l("There are multiple response sending methods you can use. it is also possible to simply populate the Response property of the endpoint and get a 200 ok response with the value of the Response property serialized in the body automatically. for ex:"),Zn=y(),As=r("p"),An=r("strong"),Ea=l("Response DTO"),ga=l(":"),se=y(),d(Fs.$$.fragment),$s=r("p"),Fn=r("strong"),Da=l("Endpoint definition"),wa=l(":"),ne=y(),d(hs.$$.fragment),Os=r("p"),ba=l("Assigning a new instance to the Response property also has the same effect:"),ee=y(),d(ms.$$.fragment),H=r("h2"),d(ns.$$.fragment),_a=l(" Configuring Endpoints Using Attributes"),ae=y(),xs=r("p"),va=l("Instead of overriding the Configure() method, endpoint classes can be annotated with attributes:"),oe=y(),v=r("ul"),$n=r("li"),hn=r("strong"),qa=l("[HttpGet(...)]"),Ra=y(),mn=r("li"),Cn=r("strong"),Ta=l("[AllowAnonymous]"),ka=y(),En=r("li"),gn=r("strong"),Na=l("[Authorize(...)]"),le=y(),es=r("p"),Sa=l("Advanced usage however does require overriding "),Dn=r("strong"),Pa=l("Configure()"),Oa=l(". You can only use one of these strategies for configuring endpoints."),te=y(),d(as.$$.fragment),pe=y(),d(Cs.$$.fragment),G=r("h2"),d(os.$$.fragment),xa=l(" Cancellation Token"),re=y(),Ms=r("p"),Ma=l("The HandleAsync method of the endpoint is supplied a CancellationToken which you can pass down to your own async methods within the handler that requires a token."),Be=y(),Hs=r("p"),Ha=l("The Send*Async methods of the endpoint also optionally accepts a CancellationToken. i.e. you can either pass down the same token supplied to the HandleAsync method or you may create/use a different token with these response sending methods depending on your requirement."),ce=y(),Gs=r("p"),Ga=l("However, do note that it is not required to supply a CancellationToken to the Send*Async methods, and there's no real need to dirty up your code like the following:"),ie=y(),d(Es.$$.fragment),Is=r("p"),Ia=l("Because if you do not supply the token to the Send*Async methods, the library automatically supplies the same token that is supplied to the HandleAsync method internally, and your code can remain cleaner."),ye=y(),Ls=r("p"),La=l("The analyzer hint/warning can be turned off by adding the following to your csproj file:"),fe=y(),d(gs.$$.fragment),this.h()},l(s){i=B(s,"H1",{});var e=c(i);u=t(e,p),e.forEach(n),b=f(s),bs=B(s,"P",{});var bn=c(bs);he=t(bn,"Follow the steps below to create your first endpoint that will handle an http post request and send a response back to the client."),bn.forEach(n),Tn=f(s),T=B(s,"H2",{id:!0,tabindex:!0});var js=c(T);A(I.$$.fragment,js),me=t(js," Create a New Project"),js.forEach(n),kn=f(s),A(ts.$$.fragment,s),k=B(s,"H2",{id:!0,tabindex:!0});var zs=c(k);A(L.$$.fragment,zs),Ce=t(zs," Install Nuget Package"),zs.forEach(n),Nn=f(s),_s=B(s,"P",{});var _n=c(_s);Ee=t(_n,"Install the latest library version using the following cli command:"),_n.forEach(n),Sn=f(s),A(ps.$$.fragment,s),vs=B(s,"P",{});var vn=c(vs);ge=t(vn,"or with Nuget package manager:"),vn.forEach(n),Pn=f(s),A(rs.$$.fragment,s),N=B(s,"H2",{id:!0,tabindex:!0});var Ws=c(N);A(j.$$.fragment,Ws),De=t(Ws," Prepare Setup"),Ws.forEach(n),On=f(s),z=B(s,"P",{});var Ds=c(z);we=t(Ds,"Replace the contents of "),Js=B(Ds,"STRONG",{});var qn=c(Js);be=t(qn,"Program.cs"),qn.forEach(n),_e=t(Ds," file with the following:"),Ds.forEach(n),xn=f(s),A(Bs.$$.fragment,s),S=B(s,"H2",{id:!0,tabindex:!0});var Us=c(S);A(W.$$.fragment,Us),ve=t(Us," Add a Request DTO"),Us.forEach(n),Mn=f(s),U=B(s,"P",{});var ws=c(U);qe=t(ws,"Create a file called "),Ks=B(ws,"STRONG",{});var Rn=c(Ks);Re=t(Rn,"MyRequest.cs"),Rn.forEach(n),Te=t(ws," and add the following:"),ws.forEach(n),Hn=f(s),A(cs.$$.fragment,s),P=B(s,"H2",{id:!0,tabindex:!0});var ja=c(P);A(V.$$.fragment,ja),ke=t(ja," Add a Response DTO"),ja.forEach(n),Gn=f(s),Y=B(s,"P",{});var ue=c(Y);Ne=t(ue,"Create a file called "),Qs=B(ue,"STRONG",{});var no=c(Qs);Se=t(no,"MyResponse.cs"),no.forEach(n),Pe=t(ue," and add the following:"),ue.forEach(n),In=f(s),A(is.$$.fragment,s),O=B(s,"H2",{id:!0,tabindex:!0});var za=c(O);A(J.$$.fragment,za),Oe=t(za," Add an Endpoint Definition"),za.forEach(n),Ln=f(s),K=B(s,"P",{});var de=c(K);xe=t(de,"create a file called "),Xs=B(de,"STRONG",{});var eo=c(Xs);Me=t(eo,"MyEndpoint.cs"),eo.forEach(n),He=t(de," and add the following:"),de.forEach(n),jn=f(s),A(ys.$$.fragment,s),Q=B(s,"P",{});var Ae=c(Q);Ge=t(Ae,"Now run your web app and send a POST request to the "),Zs=B(Ae,"STRONG",{});var ao=c(Zs);Ie=t(ao,"/api/user/create"),ao.forEach(n),Le=t(Ae," endpoint using a REST client such as postman with the following request body:"),Ae.forEach(n),zn=f(s),A(fs.$$.fragment,s),qs=B(s,"P",{});var oo=c(qs);je=t(oo,"You should then get a response back such as this:"),oo.forEach(n),Wn=f(s),A(us.$$.fragment,s),D=B(s,"P",{});var q=c(D);ze=t(q,"That's all there's to it. you simply configure how the endpoint should be listening to incoming requests from clients in the "),sn=B(q,"STRONG",{});var lo=c(sn);We=t(lo,"Configure()"),lo.forEach(n),Ue=t(q," section calling methods such as "),nn=B(q,"STRONG",{});var to=c(nn);Ve=t(to,"Verbs()"),to.forEach(n),Ye=t(q,", "),en=B(q,"STRONG",{});var po=c(en);Je=t(po,"Routes()"),po.forEach(n),Ke=t(q,", "),an=B(q,"STRONG",{});var ro=c(an);Qe=t(ro,"AllowAnonymous()"),ro.forEach(n),Xe=t(q,", etc. then you override the HandleAsync() method in order to specify your handling logic."),q.forEach(n),Un=f(s),X=B(s,"P",{});var Fe=c(X);Ze=t(Fe,`The request dto is automatically populated from the JSON body of your http request and passed in to the handler.
When you're done processing, you call the `),on=B(Fe,"STRONG",{});var Bo=c(on);sa=t(Bo,"SendAsync()"),Bo.forEach(n),na=t(Fe," method with a new response dto to be sent to the requesting client."),Fe.forEach(n),Vn=f(s),x=B(s,"H2",{id:!0,tabindex:!0});var Wa=c(x);A(Z.$$.fragment,Wa),ea=t(Wa," Endpoint Types"),Wa.forEach(n),Yn=f(s),Rs=B(s,"P",{});var co=c(Rs);aa=t(co,"There are 4 different endpoint base types you can inherit from."),co.forEach(n),Jn=f(s),w=B(s,"OL",{});var ls=c(w);ln=B(ls,"LI",{});var io=c(ln);Ts=B(io,"P",{});var Ua=c(Ts);tn=B(Ua,"STRONG",{});var yo=c(tn);oa=t(yo,"Endpoint<TRequest>"),yo.forEach(n),la=t(Ua," - use this type if there's only a request dto. you can however send any object to the client that can be serialized as a response with this generic overload."),Ua.forEach(n),io.forEach(n),ta=f(ls),pn=B(ls,"LI",{});var fo=c(pn);ks=B(fo,"P",{});var Va=c(ks);rn=B(Va,"STRONG",{});var uo=c(rn);pa=t(uo,"Endpoint<TRequest,TResponse>"),uo.forEach(n),ra=t(Va," - use this type if you have both request and response dtos. the benefit of this generic overload is that you get strongly-typed access to properties of the dto when doing integration testing and validations."),Va.forEach(n),fo.forEach(n),Ba=f(ls),Bn=B(ls,"LI",{});var Ao=c(Bn);Ns=B(Ao,"P",{});var Ya=c(Ns);cn=B(Ya,"STRONG",{});var Fo=c(cn);ca=t(Fo,"EndpointWithoutRequest"),Fo.forEach(n),ia=t(Ya," - use this type if there's no request nor response dto. you can send any serializable object as a response here also."),Ya.forEach(n),Ao.forEach(n),ya=f(ls),yn=B(ls,"LI",{});var $o=c(yn);Ss=B($o,"P",{});var Ja=c(Ss);fn=B(Ja,"STRONG",{});var ho=c(fn);fa=t(ho,"EndpointWithoutRequest<TResponse>"),ho.forEach(n),ua=t(Ja," - use this type if there's no request dto but there is a response dto."),Ja.forEach(n),$o.forEach(n),ls.forEach(n),Kn=f(s),_=B(s,"P",{});var Vs=c(_);da=t(Vs,"It is also possible to define endpoints with "),un=B(Vs,"STRONG",{});var mo=c(un);Aa=t(mo,"EmptyRequest"),mo.forEach(n),Fa=t(Vs," and "),dn=B(Vs,"STRONG",{});var Co=c(dn);$a=t(Co,"EmptyResponse"),Co.forEach(n),ha=t(Vs," if needed like so:"),Vs.forEach(n),Qn=f(s),A(ds.$$.fragment,s),M=B(s,"H2",{id:!0,tabindex:!0});var Ka=c(M);A(ss.$$.fragment,Ka),ma=t(Ka," Sending Responses"),Ka.forEach(n),Xn=f(s),Ps=B(s,"P",{});var Eo=c(Ps);Ca=t(Eo,"There are multiple response sending methods you can use. it is also possible to simply populate the Response property of the endpoint and get a 200 ok response with the value of the Response property serialized in the body automatically. for ex:"),Eo.forEach(n),Zn=f(s),As=B(s,"P",{});var Qa=c(As);An=B(Qa,"STRONG",{});var go=c(An);Ea=t(go,"Response DTO"),go.forEach(n),ga=t(Qa,":"),Qa.forEach(n),se=f(s),A(Fs.$$.fragment,s),$s=B(s,"P",{});var Xa=c($s);Fn=B(Xa,"STRONG",{});var Do=c(Fn);Da=t(Do,"Endpoint definition"),Do.forEach(n),wa=t(Xa,":"),Xa.forEach(n),ne=f(s),A(hs.$$.fragment,s),Os=B(s,"P",{});var wo=c(Os);ba=t(wo,"Assigning a new instance to the Response property also has the same effect:"),wo.forEach(n),ee=f(s),A(ms.$$.fragment,s),H=B(s,"H2",{id:!0,tabindex:!0});var Za=c(H);A(ns.$$.fragment,Za),_a=t(Za," Configuring Endpoints Using Attributes"),Za.forEach(n),ae=f(s),xs=B(s,"P",{});var bo=c(xs);va=t(bo,"Instead of overriding the Configure() method, endpoint classes can be annotated with attributes:"),bo.forEach(n),oe=f(s),v=B(s,"UL",{});var Ys=c(v);$n=B(Ys,"LI",{});var _o=c($n);hn=B(_o,"STRONG",{});var vo=c(hn);qa=t(vo,"[HttpGet(...)]"),vo.forEach(n),_o.forEach(n),Ra=f(Ys),mn=B(Ys,"LI",{});var qo=c(mn);Cn=B(qo,"STRONG",{});var Ro=c(Cn);Ta=t(Ro,"[AllowAnonymous]"),Ro.forEach(n),qo.forEach(n),ka=f(Ys),En=B(Ys,"LI",{});var To=c(En);gn=B(To,"STRONG",{});var ko=c(gn);Na=t(ko,"[Authorize(...)]"),ko.forEach(n),To.forEach(n),Ys.forEach(n),le=f(s),es=B(s,"P",{});var $e=c(es);Sa=t($e,"Advanced usage however does require overriding "),Dn=B($e,"STRONG",{});var No=c(Dn);Pa=t(No,"Configure()"),No.forEach(n),Oa=t($e,". You can only use one of these strategies for configuring endpoints."),$e.forEach(n),te=f(s),A(as.$$.fragment,s),pe=f(s),A(Cs.$$.fragment,s),G=B(s,"H2",{id:!0,tabindex:!0});var so=c(G);A(os.$$.fragment,so),xa=t(so," Cancellation Token"),so.forEach(n),re=f(s),Ms=B(s,"P",{});var So=c(Ms);Ma=t(So,"The HandleAsync method of the endpoint is supplied a CancellationToken which you can pass down to your own async methods within the handler that requires a token."),So.forEach(n),Be=f(s),Hs=B(s,"P",{});var Po=c(Hs);Ha=t(Po,"The Send*Async methods of the endpoint also optionally accepts a CancellationToken. i.e. you can either pass down the same token supplied to the HandleAsync method or you may create/use a different token with these response sending methods depending on your requirement."),Po.forEach(n),ce=f(s),Gs=B(s,"P",{});var Oo=c(Gs);Ga=t(Oo,"However, do note that it is not required to supply a CancellationToken to the Send*Async methods, and there's no real need to dirty up your code like the following:"),Oo.forEach(n),ie=f(s),A(Es.$$.fragment,s),Is=B(s,"P",{});var xo=c(Is);Ia=t(xo,"Because if you do not supply the token to the Send*Async methods, the library automatically supplies the same token that is supplied to the HandleAsync method internally, and your code can remain cleaner."),xo.forEach(n),ye=f(s),Ls=B(s,"P",{});var Mo=c(Ls);La=t(Mo,"The analyzer hint/warning can be turned off by adding the following to your csproj file:"),Mo.forEach(n),fe=f(s),A(gs.$$.fragment,s),this.h()},h(){E(T,"id","create-a-new-project"),E(T,"tabindex","-1"),E(k,"id","install-nuget-package"),E(k,"tabindex","-1"),E(N,"id","prepare-setup"),E(N,"tabindex","-1"),E(S,"id","add-a-request-dto"),E(S,"tabindex","-1"),E(P,"id","add-a-response-dto"),E(P,"tabindex","-1"),E(O,"id","add-an-endpoint-definition"),E(O,"tabindex","-1"),E(x,"id","endpoint-types"),E(x,"tabindex","-1"),E(M,"id","sending-responses"),E(M,"tabindex","-1"),E(H,"id","configuring-endpoints-using-attributes"),E(H,"tabindex","-1"),E(G,"id","cancellation-token"),E(G,"tabindex","-1")},m(s,e){o(s,i,e),a(i,u),o(s,b,e),o(s,bs,e),a(bs,he),o(s,Tn,e),o(s,T,e),F(I,T,null),a(T,me),o(s,kn,e),F(ts,s,e),o(s,k,e),F(L,k,null),a(k,Ce),o(s,Nn,e),o(s,_s,e),a(_s,Ee),o(s,Sn,e),F(ps,s,e),o(s,vs,e),a(vs,ge),o(s,Pn,e),F(rs,s,e),o(s,N,e),F(j,N,null),a(N,De),o(s,On,e),o(s,z,e),a(z,we),a(z,Js),a(Js,be),a(z,_e),o(s,xn,e),F(Bs,s,e),o(s,S,e),F(W,S,null),a(S,ve),o(s,Mn,e),o(s,U,e),a(U,qe),a(U,Ks),a(Ks,Re),a(U,Te),o(s,Hn,e),F(cs,s,e),o(s,P,e),F(V,P,null),a(P,ke),o(s,Gn,e),o(s,Y,e),a(Y,Ne),a(Y,Qs),a(Qs,Se),a(Y,Pe),o(s,In,e),F(is,s,e),o(s,O,e),F(J,O,null),a(O,Oe),o(s,Ln,e),o(s,K,e),a(K,xe),a(K,Xs),a(Xs,Me),a(K,He),o(s,jn,e),F(ys,s,e),o(s,Q,e),a(Q,Ge),a(Q,Zs),a(Zs,Ie),a(Q,Le),o(s,zn,e),F(fs,s,e),o(s,qs,e),a(qs,je),o(s,Wn,e),F(us,s,e),o(s,D,e),a(D,ze),a(D,sn),a(sn,We),a(D,Ue),a(D,nn),a(nn,Ve),a(D,Ye),a(D,en),a(en,Je),a(D,Ke),a(D,an),a(an,Qe),a(D,Xe),o(s,Un,e),o(s,X,e),a(X,Ze),a(X,on),a(on,sa),a(X,na),o(s,Vn,e),o(s,x,e),F(Z,x,null),a(x,ea),o(s,Yn,e),o(s,Rs,e),a(Rs,aa),o(s,Jn,e),o(s,w,e),a(w,ln),a(ln,Ts),a(Ts,tn),a(tn,oa),a(Ts,la),a(w,ta),a(w,pn),a(pn,ks),a(ks,rn),a(rn,pa),a(ks,ra),a(w,Ba),a(w,Bn),a(Bn,Ns),a(Ns,cn),a(cn,ca),a(Ns,ia),a(w,ya),a(w,yn),a(yn,Ss),a(Ss,fn),a(fn,fa),a(Ss,ua),o(s,Kn,e),o(s,_,e),a(_,da),a(_,un),a(un,Aa),a(_,Fa),a(_,dn),a(dn,$a),a(_,ha),o(s,Qn,e),F(ds,s,e),o(s,M,e),F(ss,M,null),a(M,ma),o(s,Xn,e),o(s,Ps,e),a(Ps,Ca),o(s,Zn,e),o(s,As,e),a(As,An),a(An,Ea),a(As,ga),o(s,se,e),F(Fs,s,e),o(s,$s,e),a($s,Fn),a(Fn,Da),a($s,wa),o(s,ne,e),F(hs,s,e),o(s,Os,e),a(Os,ba),o(s,ee,e),F(ms,s,e),o(s,H,e),F(ns,H,null),a(H,_a),o(s,ae,e),o(s,xs,e),a(xs,va),o(s,oe,e),o(s,v,e),a(v,$n),a($n,hn),a(hn,qa),a(v,Ra),a(v,mn),a(mn,Cn),a(Cn,Ta),a(v,ka),a(v,En),a(En,gn),a(gn,Na),o(s,le,e),o(s,es,e),a(es,Sa),a(es,Dn),a(Dn,Pa),a(es,Oa),o(s,te,e),F(as,s,e),o(s,pe,e),F(Cs,s,e),o(s,G,e),F(os,G,null),a(G,xa),o(s,re,e),o(s,Ms,e),a(Ms,Ma),o(s,Be,e),o(s,Hs,e),a(Hs,Ha),o(s,ce,e),o(s,Gs,e),a(Gs,Ga),o(s,ie,e),F(Es,s,e),o(s,Is,e),a(Is,Ia),o(s,ye,e),o(s,Ls,e),a(Ls,La),o(s,fe,e),F(gs,s,e),wn=!0},p(s,[e]){(!wn||e&1)&&p!==(p=s[0].title+"")&&Lo(u,p);const bn={};e&2&&(bn.$$scope={dirty:e,ctx:s}),I.$set(bn);const js={};e&2&&(js.$$scope={dirty:e,ctx:s}),L.$set(js);const zs={};e&2&&(zs.$$scope={dirty:e,ctx:s}),j.$set(zs);const _n={};e&2&&(_n.$$scope={dirty:e,ctx:s}),W.$set(_n);const vn={};e&2&&(vn.$$scope={dirty:e,ctx:s}),V.$set(vn);const Ws={};e&2&&(Ws.$$scope={dirty:e,ctx:s}),J.$set(Ws);const Ds={};e&2&&(Ds.$$scope={dirty:e,ctx:s}),Z.$set(Ds);const qn={};e&2&&(qn.$$scope={dirty:e,ctx:s}),ss.$set(qn);const Us={};e&2&&(Us.$$scope={dirty:e,ctx:s}),ns.$set(Us);const ws={};e&2&&(ws.$$scope={dirty:e,ctx:s}),as.$set(ws);const Rn={};e&2&&(Rn.$$scope={dirty:e,ctx:s}),os.$set(Rn)},i(s){wn||($(I.$$.fragment,s),$(ts.$$.fragment,s),$(L.$$.fragment,s),$(ps.$$.fragment,s),$(rs.$$.fragment,s),$(j.$$.fragment,s),$(Bs.$$.fragment,s),$(W.$$.fragment,s),$(cs.$$.fragment,s),$(V.$$.fragment,s),$(is.$$.fragment,s),$(J.$$.fragment,s),$(ys.$$.fragment,s),$(fs.$$.fragment,s),$(us.$$.fragment,s),$(Z.$$.fragment,s),$(ds.$$.fragment,s),$(ss.$$.fragment,s),$(Fs.$$.fragment,s),$(hs.$$.fragment,s),$(ms.$$.fragment,s),$(ns.$$.fragment,s),$(as.$$.fragment,s),$(Cs.$$.fragment,s),$(os.$$.fragment,s),$(Es.$$.fragment,s),$(gs.$$.fragment,s),wn=!0)},o(s){h(I.$$.fragment,s),h(ts.$$.fragment,s),h(L.$$.fragment,s),h(ps.$$.fragment,s),h(rs.$$.fragment,s),h(j.$$.fragment,s),h(Bs.$$.fragment,s),h(W.$$.fragment,s),h(cs.$$.fragment,s),h(V.$$.fragment,s),h(is.$$.fragment,s),h(J.$$.fragment,s),h(ys.$$.fragment,s),h(fs.$$.fragment,s),h(us.$$.fragment,s),h(Z.$$.fragment,s),h(ds.$$.fragment,s),h(ss.$$.fragment,s),h(Fs.$$.fragment,s),h(hs.$$.fragment,s),h(ms.$$.fragment,s),h(ns.$$.fragment,s),h(as.$$.fragment,s),h(Cs.$$.fragment,s),h(os.$$.fragment,s),h(Es.$$.fragment,s),h(gs.$$.fragment,s),wn=!1},d(s){s&&n(i),s&&n(b),s&&n(bs),s&&n(Tn),s&&n(T),m(I),s&&n(kn),m(ts,s),s&&n(k),m(L),s&&n(Nn),s&&n(_s),s&&n(Sn),m(ps,s),s&&n(vs),s&&n(Pn),m(rs,s),s&&n(N),m(j),s&&n(On),s&&n(z),s&&n(xn),m(Bs,s),s&&n(S),m(W),s&&n(Mn),s&&n(U),s&&n(Hn),m(cs,s),s&&n(P),m(V),s&&n(Gn),s&&n(Y),s&&n(In),m(is,s),s&&n(O),m(J),s&&n(Ln),s&&n(K),s&&n(jn),m(ys,s),s&&n(Q),s&&n(zn),m(fs,s),s&&n(qs),s&&n(Wn),m(us,s),s&&n(D),s&&n(Un),s&&n(X),s&&n(Vn),s&&n(x),m(Z),s&&n(Yn),s&&n(Rs),s&&n(Jn),s&&n(w),s&&n(Kn),s&&n(_),s&&n(Qn),m(ds,s),s&&n(M),m(ss),s&&n(Xn),s&&n(Ps),s&&n(Zn),s&&n(As),s&&n(se),m(Fs,s),s&&n($s),s&&n(ne),m(hs,s),s&&n(Os),s&&n(ee),m(ms,s),s&&n(H),m(ns),s&&n(ae),s&&n(xs),s&&n(oe),s&&n(v),s&&n(le),s&&n(es),s&&n(te),m(as,s),s&&n(pe),m(Cs,s),s&&n(G),m(os),s&&n(re),s&&n(Ms),s&&n(Be),s&&n(Hs),s&&n(ce),s&&n(Gs),s&&n(ie),m(Es,s),s&&n(Is),s&&n(ye),s&&n(Ls),s&&n(fe),m(gs,s)}}}function ll(C,i,p){let u;return jo(C,Wo,b=>p(0,u=b)),[u]}class fl extends Ho{constructor(i){super(),Go(this,i,ll,ol,Io,{})}}export{fl as default};
