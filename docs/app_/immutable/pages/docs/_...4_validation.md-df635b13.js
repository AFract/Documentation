import{S as bn,i as _n,s as wn,l as i,r as p,a as A,w as D,m as y,n as F,u as t,h as n,c as f,x as g,p as is,b as o,M as r,y as v,v as qn,f as b,t as _,B as w,_ as kn,E as Tn}from"../../chunks/index-6391be64.js";import{f as Vn}from"../../chunks/scroll-4f99ad69.js";import{C as ys}from"../../chunks/CodeFence-e0140bb4.js";import{L as ls}from"../../chunks/Link-69c668c2.js";import{A as vn}from"../../chunks/Admonition-a969bddf.js";import"../../chunks/singletons-9fd4729a.js";import"../../chunks/contexts-c56b72f8.js";function Rn(u){let e;return{c(){e=p("#")},l(l){e=t(l,"#")},m(l,B){o(l,e,B)},d(l){l&&n(e)}}}function xn(u){let e;return{c(){e=p("FluentValidation")},l(l){e=t(l,"FluentValidation")},m(l,B){o(l,e,B)},d(l){l&&n(e)}}}function Pn(u){let e,l;return{c(){e=i("p"),l=p("You don't need to install the FluentValidation package as it's automatically brought in by FastEndpoints.")},l(B){e=y(B,"P",{});var E=F(e);l=t(E,"You don't need to install the FluentValidation package as it's automatically brought in by FastEndpoints."),E.forEach(n)},m(B,E){o(B,e,E),r(e,l)},p:Tn,d(B){B&&n(e)}}}function In(u){let e;return{c(){e=p("configuration settings")},l(l){e=t(l,"configuration settings")},m(l,B){o(l,e,B)},d(l){l&&n(e)}}}function Sn(u){let e;return{c(){e=p("#")},l(l){e=t(l,"#")},m(l,B){o(l,e,B)},d(l){l&&n(e)}}}function Nn(u){let e;return{c(){e=p("#")},l(l){e=t(l,"#")},m(l,B){o(l,e,B)},d(l){l&&n(e)}}}function Un(u){let e;return{c(){e=p("performance reasons")},l(l){e=t(l,"performance reasons")},m(l,B){o(l,e,B)},d(l){l&&n(e)}}}function Mn(u){let e;return{c(){e=p("here")},l(l){e=t(l,"here")},m(l,B){o(l,e,B)},d(l){l&&n(e)}}}function On(u){let e,l,B,E,q,h,H,T,m,j,$,Y,V;return B=new ls({props:{href:"https://fast-endpoints.com/wiki/Benchmarks.html",target:"_blank",rel:"noopener noreferrer",$$slots:{default:[Un]},$$scope:{ctx:u}}}),$=new ls({props:{href:"https://fast-endpoints.com/wiki/Dependency-Injection.html#dependency-resolving-for-validators",target:"_blank",rel:"noopener noreferrer",$$slots:{default:[Mn]},$$scope:{ctx:u}}}),{c(){e=i("p"),l=p("By default, validators are used as singletons for "),D(B.$$.fragment),E=p(". i.e. there will only ever be one instance of a validator."),q=A(),h=i("p"),H=p("All requests to an endpoint will use that single instance for validating the incoming request."),T=A(),m=i("p"),j=p("So, you should not maintain state in your validators. If you must have state in the validator or would like to do constructor dependency injection by paying the performance penalty, you may do so as shown "),D($.$$.fragment),Y=p(".")},l(c){e=y(c,"P",{});var d=F(e);l=t(d,"By default, validators are used as singletons for "),g(B.$$.fragment,d),E=t(d,". i.e. there will only ever be one instance of a validator."),d.forEach(n),q=f(c),h=y(c,"P",{});var k=F(h);H=t(k,"All requests to an endpoint will use that single instance for validating the incoming request."),k.forEach(n),T=f(c),m=y(c,"P",{});var C=F(m);j=t(C,"So, you should not maintain state in your validators. If you must have state in the validator or would like to do constructor dependency injection by paying the performance penalty, you may do so as shown "),g($.$$.fragment,C),Y=t(C,"."),C.forEach(n)},m(c,d){o(c,e,d),r(e,l),v(B,e,null),r(e,E),o(c,q,d),o(c,h,d),r(h,H),o(c,T,d),o(c,m,d),r(m,j),v($,m,null),r(m,Y),V=!0},p(c,d){const k={};d&2&&(k.$$scope={dirty:d,ctx:c}),B.$set(k);const C={};d&2&&(C.$$scope={dirty:d,ctx:c}),$.$set(C)},i(c){V||(b(B.$$.fragment,c),b($.$$.fragment,c),V=!0)},o(c){_(B.$$.fragment,c),_($.$$.fragment,c),V=!1},d(c){c&&n(e),w(B),c&&n(q),c&&n(h),c&&n(T),c&&n(m),w($)}}}function Gn(u){let e,l=u[0].title+"",B,E,q,h,H,T,m,j,$,Y,V,c,d,k,C,Ms,Fs,Os,Gs,Ds,P,gs,I,Hs,us,js,Ys,vs,os,Ls,bs,L,W,ps,Ws,_s,z,S,zs,N,Js,ws,R,U,Ks,qs,M,Qs,As,Xs,Zs,ks,J,ts,sn,Ts,rs,nn,Vs,K,x,O,an,Rs,Bs,en,xs,Q,X,fs,ln,on,Ps,Z,ds,pn,tn,Is,ss,ms,rn,Bn,Ss,G,$s;return h=new ls({props:{class:"header-anchor",href:"#request-dto-validation","aria-hidden":"true",$$slots:{default:[Rn]},$$scope:{ctx:u}}}),$=new ls({props:{href:"https://fluentvalidation.net/",target:"_blank",rel:"noopener noreferrer",$$slots:{default:[xn]},$$scope:{ctx:u}}}),P=new vn({props:{type:"info",$$slots:{default:[Pn]},$$scope:{ctx:u}}}),L=new ys({props:{title:"Request.cs",lang:"csharp",ext:"cs",linesCount:6,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">CreateUserRequest</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> FullName { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> Age { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),W=new ys({props:{title:"MyValidator.cs",lang:"csharp",ext:"cs",linesCount:18,code:`<pre><code><span class="line"><span style="color: #ABB2BF">  </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyValidator</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">Validator</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">CreateUserRequest</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">MyValidator</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">RuleFor</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">x</span><span style="color: #ABB2BF"> =&gt; </span><span style="color: #E5C07B">x</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">FullName</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">            .</span><span style="color: #61AFEF">NotEmpty</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">            .</span><span style="color: #61AFEF">WithMessage</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;your name is required!&quot;</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">            .</span><span style="color: #61AFEF">MinimumLength</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">            .</span><span style="color: #61AFEF">WithMessage</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;your name is too short!&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">RuleFor</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">x</span><span style="color: #ABB2BF"> =&gt; </span><span style="color: #E5C07B">x</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Age</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">            .</span><span style="color: #61AFEF">NotEmpty</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">            .</span><span style="color: #61AFEF">WithMessage</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;we need your age!&quot;</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">            .</span><span style="color: #61AFEF">GreaterThan</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">18</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">            .</span><span style="color: #61AFEF">WithMessage</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;you are not legal yet!&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),z=new ys({props:{lang:"json",ext:"json",linesCount:9,code:`<pre><code><span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">&quot;StatusCode&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">400</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">&quot;Message&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&quot;One or more errors occured!&quot;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">&quot;Errors&quot;</span><span style="color: #ABB2BF">: {</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E06C75">&quot;FullName&quot;</span><span style="color: #ABB2BF">: [</span><span style="color: #98C379">&quot;your name is required!&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&quot;your name is too short!&quot;</span><span style="color: #ABB2BF">],</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E06C75">&quot;Age&quot;</span><span style="color: #ABB2BF">: [</span><span style="color: #98C379">&quot;we need your age!&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&quot;you are not legal yet!&quot;</span><span style="color: #ABB2BF">]</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),N=new ls({props:{href:"https://fast-endpoints.com/wiki/Configuration-Settings.html",target:"_blank",rel:"noopener noreferrer",$$slots:{default:[In]},$$scope:{ctx:u}}}),U=new ls({props:{class:"header-anchor",href:"#disable-automatic-failure-response","aria-hidden":"true",$$slots:{default:[Sn]},$$scope:{ctx:u}}}),J=new ys({props:{title:"CreateUserEndpoint.cs",lang:"csharp",ext:"cs",linesCount:10,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">CreateUserEndpoint</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">Endpoint</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">CreateUserRequest</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Verbs</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">Http</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">POST</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Routes</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/api/user/create&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">DontThrowIfValidationFails</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),K=new ys({props:{lang:"csharp",ext:"cs",linesCount:13,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">CreateUserRequest</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75">ValidationFailed</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">foreach</span><span style="color: #ABB2BF"> (</span><span style="color: #E5C07B">ValidationFailure</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">failure</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">in</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">ValidationFailures</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">propertyName</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">failure</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">PropertyName</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">errorMessage</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">failure</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">ErrorMessage</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">SendOkAsync</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),O=new ls({props:{class:"header-anchor",href:"#application-logic-validation","aria-hidden":"true",$$slots:{default:[Nn]},$$scope:{ctx:u}}}),Q=new ys({props:{title:"CreateUserEndpoint.cs",lang:"csharp",ext:"cs",linesCount:32,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">CreateUserEndpoint</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">Endpoint</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">CreateUserRequest</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">CreateUserResponse</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Verbs</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">Http</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">POST</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Routes</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/api/user/create&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">CreateUserRequest</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">userExists</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">userRepo</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">UserAlreadyExists</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">EmailAddress</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75">userExists</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #61AFEF">AddError</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">r</span><span style="color: #ABB2BF"> =&gt; </span><span style="color: #E5C07B">r</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">EmailAddress</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&quot;this email is already in use!&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">maxAge</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">userRepo</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">GetMaxAllowedAge</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Age</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&gt;=</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">maxAge</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #61AFEF">AddError</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">r</span><span style="color: #ABB2BF"> =&gt; </span><span style="color: #E5C07B">r</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Age</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&quot;you are not eligible for insurance!&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">ThrowIfAnyErrors</span><span style="color: #ABB2BF">(); </span><span style="color: #7F848E; font-style: italic">//because if there are errors, we shouldn&#39;t go beyond this point</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">userID</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">userRepo</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">CreateNew</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">req</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75">userID</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">is</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">null</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #61AFEF">ThrowError</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;creating a user did not go so well!&quot;</span><span style="color: #ABB2BF">); </span><span style="color: #7F848E; font-style: italic">//error response thrown here</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">SendAsync</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">CreateUserResponse</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E06C75">UserID</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">userID</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E06C75">FullName</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">FullName</span></span>
<span class="line"><span style="color: #ABB2BF">        });</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),G=new vn({props:{type:"info",$$slots:{default:[On]},$$scope:{ctx:u}}}),{c(){e=i("h1"),B=p(l),E=A(),q=i("h2"),D(h.$$.fragment),H=p(" Request DTO Validation"),T=A(),m=i("p"),j=p("Request validation is done using "),D($.$$.fragment),Y=p(" rules."),V=A(),c=i("p"),d=p("Please refer to the FluentValidation website if you haven't used it before."),k=A(),C=i("p"),Ms=p("Just make sure to import it first (or add a global using FluentValidation; in "),Fs=i("strong"),Os=p("Program.cs"),Gs=p(") before writing any validators."),Ds=A(),D(P.$$.fragment),gs=A(),I=i("p"),Hs=p("Simply write your validators by inheriting the "),us=i("strong"),js=p("Validator<TRequest>"),Ys=p(" base class like below."),vs=A(),os=i("p"),Ls=p(`You don't need to register your validators with the DI container.
That is automatically taken care of by FastEndpoints.`),bs=A(),D(L.$$.fragment),D(W.$$.fragment),ps=i("p"),Ws=p("If a request is received that doesn't meet the above model validation criteria, a 400 bad request response will be sent to the client automatically with the following json body describing the error details:"),_s=A(),D(z.$$.fragment),S=i("p"),zs=p("The format of the error response is customizable as described in the "),D(N.$$.fragment),Js=p(" page."),ws=A(),R=i("h2"),D(U.$$.fragment),Ks=p(" Disable Automatic Failure Response"),qs=A(),M=i("p"),Qs=p("In cases where you need more control of the validations, you can turn off the default behavior by calling the "),As=i("strong"),Xs=p("DontThrowIfValidationFails()"),Zs=p(" method in the endpoint configuration like so:"),ks=A(),D(J.$$.fragment),ts=i("p"),sn=p("Doing so will not send an automatic error response to the client and your handler will be executed."),Ts=A(),rs=i("p"),nn=p("You can check the validation status by looking at the ValidationFailures property of the handler like so:"),Vs=A(),D(K.$$.fragment),x=i("h2"),D(O.$$.fragment),an=p(" Application Logic Validation"),Rs=A(),Bs=i("p"),en=p("In cases where there are app/business logic validation failures during the processing of a request in the handler, you can send an error response to the client like so:"),xs=A(),D(Q.$$.fragment),X=i("p"),fs=i("strong"),ln=p("AddError()"),on=p(" - This method adds a validation failure to the ValidationFailures property of the handler."),Ps=A(),Z=i("p"),ds=i("strong"),pn=p("ThrowIfAnyErrors()"),tn=p(` - This method will cause the handler execution to be halted when called and an error response will be sent to the client if there are any validation failures in the ValidationFailures list.
If there's none, execution will proceed to the next line.`),Is=A(),ss=i("p"),ms=i("strong"),rn=p("ThrowError()"),Bn=p(" - This method will abort execution immediately and send an error response to the client."),Ss=A(),D(G.$$.fragment),this.h()},l(s){e=y(s,"H1",{});var a=F(e);B=t(a,l),a.forEach(n),E=f(s),q=y(s,"H2",{id:!0,tabindex:!0});var cs=F(q);g(h.$$.fragment,cs),H=t(cs," Request DTO Validation"),cs.forEach(n),T=f(s),m=y(s,"P",{});var ns=F(m);j=t(ns,"Request validation is done using "),g($.$$.fragment,ns),Y=t(ns," rules."),ns.forEach(n),V=f(s),c=y(s,"P",{});var Cs=F(c);d=t(Cs,"Please refer to the FluentValidation website if you haven't used it before."),Cs.forEach(n),k=f(s),C=y(s,"P",{});var as=F(C);Ms=t(as,"Just make sure to import it first (or add a global using FluentValidation; in "),Fs=y(as,"STRONG",{});var Es=F(Fs);Os=t(Es,"Program.cs"),Es.forEach(n),Gs=t(as,") before writing any validators."),as.forEach(n),Ds=f(s),g(P.$$.fragment,s),gs=f(s),I=y(s,"P",{});var es=F(I);Hs=t(es,"Simply write your validators by inheriting the "),us=y(es,"STRONG",{});var hs=F(us);js=t(hs,"Validator<TRequest>"),hs.forEach(n),Ys=t(es," base class like below."),es.forEach(n),vs=f(s),os=y(s,"P",{});var fn=F(os);Ls=t(fn,`You don't need to register your validators with the DI container.
That is automatically taken care of by FastEndpoints.`),fn.forEach(n),bs=f(s),g(L.$$.fragment,s),g(W.$$.fragment,s),ps=y(s,"P",{});var dn=F(ps);Ws=t(dn,"If a request is received that doesn't meet the above model validation criteria, a 400 bad request response will be sent to the client automatically with the following json body describing the error details:"),dn.forEach(n),_s=f(s),g(z.$$.fragment,s),S=y(s,"P",{});var Ns=F(S);zs=t(Ns,"The format of the error response is customizable as described in the "),g(N.$$.fragment,Ns),Js=t(Ns," page."),Ns.forEach(n),ws=f(s),R=y(s,"H2",{id:!0,tabindex:!0});var cn=F(R);g(U.$$.fragment,cn),Ks=t(cn," Disable Automatic Failure Response"),cn.forEach(n),qs=f(s),M=y(s,"P",{});var Us=F(M);Qs=t(Us,"In cases where you need more control of the validations, you can turn off the default behavior by calling the "),As=y(Us,"STRONG",{});var mn=F(As);Xs=t(mn,"DontThrowIfValidationFails()"),mn.forEach(n),Zs=t(Us," method in the endpoint configuration like so:"),Us.forEach(n),ks=f(s),g(J.$$.fragment,s),ts=y(s,"P",{});var $n=F(ts);sn=t($n,"Doing so will not send an automatic error response to the client and your handler will be executed."),$n.forEach(n),Ts=f(s),rs=y(s,"P",{});var Cn=F(rs);nn=t(Cn,"You can check the validation status by looking at the ValidationFailures property of the handler like so:"),Cn.forEach(n),Vs=f(s),g(K.$$.fragment,s),x=y(s,"H2",{id:!0,tabindex:!0});var yn=F(x);g(O.$$.fragment,yn),an=t(yn," Application Logic Validation"),yn.forEach(n),Rs=f(s),Bs=y(s,"P",{});var En=F(Bs);en=t(En,"In cases where there are app/business logic validation failures during the processing of a request in the handler, you can send an error response to the client like so:"),En.forEach(n),xs=f(s),g(Q.$$.fragment,s),X=y(s,"P",{});var Fn=F(X);fs=y(Fn,"STRONG",{});var hn=F(fs);ln=t(hn,"AddError()"),hn.forEach(n),on=t(Fn," - This method adds a validation failure to the ValidationFailures property of the handler."),Fn.forEach(n),Ps=f(s),Z=y(s,"P",{});var un=F(Z);ds=y(un,"STRONG",{});var Dn=F(ds);pn=t(Dn,"ThrowIfAnyErrors()"),Dn.forEach(n),tn=t(un,` - This method will cause the handler execution to be halted when called and an error response will be sent to the client if there are any validation failures in the ValidationFailures list.
If there's none, execution will proceed to the next line.`),un.forEach(n),Is=f(s),ss=y(s,"P",{});var An=F(ss);ms=y(An,"STRONG",{});var gn=F(ms);rn=t(gn,"ThrowError()"),gn.forEach(n),Bn=t(An," - This method will abort execution immediately and send an error response to the client."),An.forEach(n),Ss=f(s),g(G.$$.fragment,s),this.h()},h(){is(q,"id","request-dto-validation"),is(q,"tabindex","-1"),is(R,"id","disable-automatic-failure-response"),is(R,"tabindex","-1"),is(x,"id","application-logic-validation"),is(x,"tabindex","-1")},m(s,a){o(s,e,a),r(e,B),o(s,E,a),o(s,q,a),v(h,q,null),r(q,H),o(s,T,a),o(s,m,a),r(m,j),v($,m,null),r(m,Y),o(s,V,a),o(s,c,a),r(c,d),o(s,k,a),o(s,C,a),r(C,Ms),r(C,Fs),r(Fs,Os),r(C,Gs),o(s,Ds,a),v(P,s,a),o(s,gs,a),o(s,I,a),r(I,Hs),r(I,us),r(us,js),r(I,Ys),o(s,vs,a),o(s,os,a),r(os,Ls),o(s,bs,a),v(L,s,a),v(W,s,a),o(s,ps,a),r(ps,Ws),o(s,_s,a),v(z,s,a),o(s,S,a),r(S,zs),v(N,S,null),r(S,Js),o(s,ws,a),o(s,R,a),v(U,R,null),r(R,Ks),o(s,qs,a),o(s,M,a),r(M,Qs),r(M,As),r(As,Xs),r(M,Zs),o(s,ks,a),v(J,s,a),o(s,ts,a),r(ts,sn),o(s,Ts,a),o(s,rs,a),r(rs,nn),o(s,Vs,a),v(K,s,a),o(s,x,a),v(O,x,null),r(x,an),o(s,Rs,a),o(s,Bs,a),r(Bs,en),o(s,xs,a),v(Q,s,a),o(s,X,a),r(X,fs),r(fs,ln),r(X,on),o(s,Ps,a),o(s,Z,a),r(Z,ds),r(ds,pn),r(Z,tn),o(s,Is,a),o(s,ss,a),r(ss,ms),r(ms,rn),r(ss,Bn),o(s,Ss,a),v(G,s,a),$s=!0},p(s,[a]){(!$s||a&1)&&l!==(l=s[0].title+"")&&qn(B,l);const cs={};a&2&&(cs.$$scope={dirty:a,ctx:s}),h.$set(cs);const ns={};a&2&&(ns.$$scope={dirty:a,ctx:s}),$.$set(ns);const Cs={};a&2&&(Cs.$$scope={dirty:a,ctx:s}),P.$set(Cs);const as={};a&2&&(as.$$scope={dirty:a,ctx:s}),N.$set(as);const Es={};a&2&&(Es.$$scope={dirty:a,ctx:s}),U.$set(Es);const es={};a&2&&(es.$$scope={dirty:a,ctx:s}),O.$set(es);const hs={};a&2&&(hs.$$scope={dirty:a,ctx:s}),G.$set(hs)},i(s){$s||(b(h.$$.fragment,s),b($.$$.fragment,s),b(P.$$.fragment,s),b(L.$$.fragment,s),b(W.$$.fragment,s),b(z.$$.fragment,s),b(N.$$.fragment,s),b(U.$$.fragment,s),b(J.$$.fragment,s),b(K.$$.fragment,s),b(O.$$.fragment,s),b(Q.$$.fragment,s),b(G.$$.fragment,s),$s=!0)},o(s){_(h.$$.fragment,s),_($.$$.fragment,s),_(P.$$.fragment,s),_(L.$$.fragment,s),_(W.$$.fragment,s),_(z.$$.fragment,s),_(N.$$.fragment,s),_(U.$$.fragment,s),_(J.$$.fragment,s),_(K.$$.fragment,s),_(O.$$.fragment,s),_(Q.$$.fragment,s),_(G.$$.fragment,s),$s=!1},d(s){s&&n(e),s&&n(E),s&&n(q),w(h),s&&n(T),s&&n(m),w($),s&&n(V),s&&n(c),s&&n(k),s&&n(C),s&&n(Ds),w(P,s),s&&n(gs),s&&n(I),s&&n(vs),s&&n(os),s&&n(bs),w(L,s),w(W,s),s&&n(ps),s&&n(_s),w(z,s),s&&n(S),w(N),s&&n(ws),s&&n(R),w(U),s&&n(qs),s&&n(M),s&&n(ks),w(J,s),s&&n(ts),s&&n(Ts),s&&n(rs),s&&n(Vs),w(K,s),s&&n(x),w(O),s&&n(Rs),s&&n(Bs),s&&n(xs),w(Q,s),s&&n(X),s&&n(Ps),s&&n(Z),s&&n(Is),s&&n(ss),s&&n(Ss),w(G,s)}}}function Hn(u,e,l){let B;return kn(u,Vn,E=>l(0,B=E)),[B]}class Qn extends bn{constructor(e){super(),_n(this,e,Hn,Gn,wn,{})}}export{Qn as default};
