import{S as Ce,i as Ee,s as De,l as B,r as l,a as f,w as h,m as c,n as i,u as o,h as n,c as F,x as $,p as S,b as r,M as e,y as C,v as ge,f as E,t as D,B as g,_ as be}from"../../chunks/index-98cfa7ad.js";import{f as _e}from"../../chunks/scroll-1be19199.js";import{C as sn}from"../../chunks/CodeFence-182ee1eb.js";import{L as cs}from"../../chunks/Link-76ffd583.js";import{A as ve}from"../../chunks/Admonition-d261edcb.js";import"../../chunks/singletons-9aa31187.js";import"../../chunks/contexts-ec7bfa4f.js";function we(d){let p;return{c(){p=l("#")},l(t){p=o(t,"#")},m(t,y){r(t,p,y)},d(t){t&&n(p)}}}function Se(d){let p;return{c(){p=l("#")},l(t){p=o(t,"#")},m(t,y){r(t,p,y)},d(t){t&&n(p)}}}function Te(d){let p;return{c(){p=l("#")},l(t){p=o(t,"#")},m(t,y){r(t,p,y)},d(t){t&&n(p)}}}function ke(d){let p;return{c(){p=l("#")},l(t){p=o(t,"#")},m(t,y){r(t,p,y)},d(t){t&&n(p)}}}function Re(d){let p;return{c(){p=l("#")},l(t){p=o(t,"#")},m(t,y){r(t,p,y)},d(t){t&&n(p)}}}function Ie(d){let p;return{c(){p=l("See here")},l(t){p=o(t,"See here")},m(t,y){r(t,p,y)},d(t){t&&n(p)}}}function qe(d){let p,t,y,m;return t=new cs({props:{href:"https://github.com/dj-nitehawk/FastEndpoints-FileHandling-Demo",target:"_blank",rel:"noopener noreferrer",$$slots:{default:[Ie]},$$scope:{ctx:d}}}),{c(){p=B("p"),h(t.$$.fragment),y=l(" for an example project that stores and retrieves images in MongoDB.")},l(A){p=c(A,"P",{});var u=i(p);$(t.$$.fragment,u),y=o(u," for an example project that stores and retrieves images in MongoDB."),u.forEach(n)},m(A,u){r(A,p,u),C(t,p,null),e(p,y),m=!0},p(A,u){const J={};u&2&&(J.$$scope={dirty:u,ctx:A}),t.$set(J)},i(A){m||(E(t.$$.fragment,A),m=!0)},o(A){D(t.$$.fragment,A),m=!1},d(A){A&&n(p),g(t)}}}function Oe(d){let p,t=d[0].title+"",y,m,A,u,J,qs,Q,nn,Os,W,q,en,is,an,ln,Ps,O,on,ys,tn,pn,xs,b,rn,fs,Bn,cn,Fs,yn,fn,Ns,T,P,Fn,Hs,x,An,As,dn,un,Gs,z,k,N,mn,Us,_,hn,ds,$n,Cn,us,En,Dn,Ls,v,gn,ms,bn,_n,hs,vn,wn,Ms,Y,X,Sn,Ws,j,R,H,Tn,zs,Z,kn,Ys,w,$s,G,Cs,Rn,In,Es,qn,On,Pn,Ds,U,gs,xn,Nn,bs,Hn,Gn,Un,_s,ss,vs,Ln,Mn,js,ns,Wn,Ks,es,zn,Vs,as,Yn,Js,I,L,jn,Qs,ls,Kn,Xs,M,ws;return u=new cs({props:{class:"header-anchor",href:"#handling-file-uploads","aria-hidden":"true",$$slots:{default:[we]},$$scope:{ctx:d}}}),W=new sn({props:{lang:"csharp",ext:"cs",linesCount:27,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyEndpoint</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">Endpoint</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">MyRequest</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Verbs</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">Http</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">POST</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Routes</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/api/uploads/image&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">AllowFileUploads</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">MyRequest</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E5C07B">Files</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Count</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">file</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Files</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">];</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">SendStreamAsync</span><span style="color: #ABB2BF">(</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #E5C07B">stream</span><span style="color: #ABB2BF">: </span><span style="color: #E5C07B">file</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">OpenReadStream</span><span style="color: #ABB2BF">(),</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #E5C07B">fileName</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&quot;test.png&quot;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #E5C07B">fileLengthBytes</span><span style="color: #ABB2BF">: </span><span style="color: #E5C07B">file</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Length</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #E5C07B">contentType</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&quot;image/png&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">SendNoContentAsync</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),P=new cs({props:{class:"header-anchor",href:"#binding-files-to-dto","aria-hidden":"true",$$slots:{default:[Se]},$$scope:{ctx:d}}}),z=new sn({props:{title:"MyRequest.cs",lang:"csharp",ext:"cs",linesCount:9,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyRequest</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> Width { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> Height { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">IFormFile</span><span style="color: #ABB2BF"> File1 { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">IFormFile</span><span style="color: #ABB2BF"> File2 { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">IFormFile</span><span style="color: #ABB2BF"> File3 { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),N=new cs({props:{class:"header-anchor",href:"#handling-large-file-uploads-without-buffering","aria-hidden":"true",$$slots:{default:[Te]},$$scope:{ctx:d}}}),Y=new sn({props:{lang:"csharp",ext:"cs",linesCount:25,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Upload</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">EndpointWithoutRequest</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Post</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/api/file-upload&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">AllowFileUploads</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">dontAutoBindFormData</span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">); </span><span style="color: #7F848E; font-style: italic">//turns off buffering</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">foreach</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">section</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">in</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">FormFileSectionsAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">ct</span><span style="color: #ABB2BF">))</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75">section</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">is</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">not</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">            {</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #C678DD">using</span><span style="color: #ABB2BF"> (</span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">fs</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">IO</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">File</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">Create</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">section</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">FileName</span><span style="color: #ABB2BF">))</span></span>
<span class="line"><span style="color: #ABB2BF">                {</span></span>
<span class="line"><span style="color: #ABB2BF">                    </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">section</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Section</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Body</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">CopyToAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">fs</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">1024</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">*</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">64</span><span style="color: #ABB2BF">, </span><span style="color: #E06C75">ct</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">                }</span></span>
<span class="line"><span style="color: #ABB2BF">            }</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">SendOkAsync</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;upload complete!&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),j=new sn({props:{title:"Program.cs",lang:"csharp",ext:"cs",linesCount:6,code:`<pre><code><span class="line"></span>
<span class="line"><span style="color: #E5C07B">builder</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">WebHost</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">ConfigureKestrel</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">o</span><span style="color: #ABB2BF"> =&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">o</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Limits</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">MaxRequestBodySize</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1073741824</span><span style="color: #ABB2BF">; </span><span style="color: #7F848E; font-style: italic">//set to max allowed file size of your system</span></span>
<span class="line"><span style="color: #ABB2BF">});</span></span>
<span class="line"></span></code></pre>`}}),H=new cs({props:{class:"header-anchor",href:"#sending-file-responses","aria-hidden":"true",$$slots:{default:[ke]},$$scope:{ctx:d}}}),L=new cs({props:{class:"header-anchor",href:"#write-to-response-stream","aria-hidden":"true",$$slots:{default:[Re]},$$scope:{ctx:d}}}),M=new ve({props:{type:"warning",$$slots:{default:[qe]},$$scope:{ctx:d}}}),{c(){p=B("h1"),y=l(t),m=f(),A=B("h2"),h(u.$$.fragment),J=l(" Handling File Uploads"),qs=f(),Q=B("p"),nn=l("The following example relays back the image data uploaded to the endpoint in order to demonstrate both receiving and sending of file data:"),Os=f(),h(W.$$.fragment),q=B("p"),en=l("Endpoints by default won't allow "),is=B("strong"),an=l("multipart/form-data"),ln=l(" content uploads."),Ps=f(),O=B("p"),on=l("You'd have to enable file uploads by using the "),ys=B("strong"),tn=l("AllowFileUploads()"),pn=l(" method in the handler configuration like shown above."),xs=f(),b=B("p"),rn=l("The received files are exposed to the endpoint handler via the "),fs=B("strong"),Bn=l("Files"),cn=l(" property which is of "),Fs=B("strong"),yn=l("IFormFileCollection"),fn=l(" type."),Ns=f(),T=B("h2"),h(P.$$.fragment),Fn=l(" Binding Files To DTO"),Hs=f(),x=B("p"),An=l("File data can also be automatically bound to the request dto by simply adding an "),As=B("strong"),dn=l("IFormFile"),un=l(" property with a matching name."),Gs=f(),h(z.$$.fragment),k=B("h2"),h(N.$$.fragment),mn=l(" Handling Large File Uploads Without Buffering"),Us=f(),_=B("p"),hn=l("In ASP.NET, accessing "),ds=B("strong"),$n=l("IFormFileCollection"),Cn=l(" or "),us=B("strong"),En=l("IFormFile"),Dn=l(" causes the complete uploaded file to be read from the request stream and buffered to either memory or disk."),Ls=f(),v=B("p"),gn=l("You can avoid this buffering and reduce server resource utilization by manually reading the multipart file sections with the combination of "),ms=B("strong"),bn=l("AllowFileUploads(dontAutoBindFormData: true)"),_n=l(" and "),hs=B("strong"),vn=l("FormFileSectionsAsync()"),wn=l(" methods as shown below:"),Ms=f(),h(Y.$$.fragment),X=B("p"),Sn=l("You may also need to increase the max request body size in kestrel to allow large file uploads like so:"),Ws=f(),h(j.$$.fragment),R=B("h2"),h(H.$$.fragment),Tn=l(" Sending File Responses"),zs=f(),Z=B("p"),kn=l("There are 3 methods you can use to send file data down to the client."),Ys=f(),w=B("ul"),$s=B("li"),G=B("p"),Cs=B("strong"),Rn=l("SendStreamAsync()"),In=l(" - supply a "),Es=B("strong"),qn=l("System.IO.Stream"),On=l(" to this method for reading binary data from."),Pn=f(),Ds=B("li"),U=B("p"),gs=B("strong"),xn=l("SendFileAsync()"),Nn=l(" - supply a "),bs=B("strong"),Hn=l("System.IO.FileInfo"),Gn=l(" instance as the source of the binary data."),Un=f(),_s=B("li"),ss=B("p"),vs=B("strong"),Ln=l("SendBytesAsync()"),Mn=l(" - supply a byte array as the source of data to be sent to the client."),js=f(),ns=B("p"),Wn=l("All 3 methods allow you to optionally specify the content-type and file name."),Ks=f(),es=B("p"),zn=l("If file name is specified, the Content-Disposition: attachment response header will be set with the given file name so that a file download will be initiated by the client/browser."),Vs=f(),as=B("p"),Yn=l("Range requests/ partial responses are also supported by setting the enableRangeProcessing parameter to true."),Js=f(),I=B("h2"),h(L.$$.fragment),jn=l(" Write To Response Stream"),Qs=f(),ls=B("p"),Kn=l("Instead of using the above methods, you also have the choice of writing directly to the http response stream."),Xs=f(),h(M.$$.fragment),this.h()},l(s){p=c(s,"H1",{});var a=i(p);y=o(a,t),a.forEach(n),m=F(s),A=c(s,"H2",{id:!0,tabindex:!0});var os=i(A);$(u.$$.fragment,os),J=o(os," Handling File Uploads"),os.forEach(n),qs=F(s),Q=c(s,"P",{});var Ss=i(Q);nn=o(Ss,"The following example relays back the image data uploaded to the endpoint in order to demonstrate both receiving and sending of file data:"),Ss.forEach(n),Os=F(s),$(W.$$.fragment,s),q=c(s,"P",{});var K=i(q);en=o(K,"Endpoints by default won't allow "),is=c(K,"STRONG",{});var Ts=i(is);an=o(Ts,"multipart/form-data"),Ts.forEach(n),ln=o(K," content uploads."),K.forEach(n),Ps=F(s),O=c(s,"P",{});var V=i(O);on=o(V,"You'd have to enable file uploads by using the "),ys=c(V,"STRONG",{});var ks=i(ys);tn=o(ks,"AllowFileUploads()"),ks.forEach(n),pn=o(V," method in the handler configuration like shown above."),V.forEach(n),xs=F(s),b=c(s,"P",{});var ts=i(b);rn=o(ts,"The received files are exposed to the endpoint handler via the "),fs=c(ts,"STRONG",{});var se=i(fs);Bn=o(se,"Files"),se.forEach(n),cn=o(ts," property which is of "),Fs=c(ts,"STRONG",{});var ne=i(Fs);yn=o(ne,"IFormFileCollection"),ne.forEach(n),fn=o(ts," type."),ts.forEach(n),Ns=F(s),T=c(s,"H2",{id:!0,tabindex:!0});var Vn=i(T);$(P.$$.fragment,Vn),Fn=o(Vn," Binding Files To DTO"),Vn.forEach(n),Hs=F(s),x=c(s,"P",{});var Zs=i(x);An=o(Zs,"File data can also be automatically bound to the request dto by simply adding an "),As=c(Zs,"STRONG",{});var ee=i(As);dn=o(ee,"IFormFile"),ee.forEach(n),un=o(Zs," property with a matching name."),Zs.forEach(n),Gs=F(s),$(z.$$.fragment,s),k=c(s,"H2",{id:!0,tabindex:!0});var Jn=i(k);$(N.$$.fragment,Jn),mn=o(Jn," Handling Large File Uploads Without Buffering"),Jn.forEach(n),Us=F(s),_=c(s,"P",{});var ps=i(_);hn=o(ps,"In ASP.NET, accessing "),ds=c(ps,"STRONG",{});var ae=i(ds);$n=o(ae,"IFormFileCollection"),ae.forEach(n),Cn=o(ps," or "),us=c(ps,"STRONG",{});var le=i(us);En=o(le,"IFormFile"),le.forEach(n),Dn=o(ps," causes the complete uploaded file to be read from the request stream and buffered to either memory or disk."),ps.forEach(n),Ls=F(s),v=c(s,"P",{});var rs=i(v);gn=o(rs,"You can avoid this buffering and reduce server resource utilization by manually reading the multipart file sections with the combination of "),ms=c(rs,"STRONG",{});var oe=i(ms);bn=o(oe,"AllowFileUploads(dontAutoBindFormData: true)"),oe.forEach(n),_n=o(rs," and "),hs=c(rs,"STRONG",{});var te=i(hs);vn=o(te,"FormFileSectionsAsync()"),te.forEach(n),wn=o(rs," methods as shown below:"),rs.forEach(n),Ms=F(s),$(Y.$$.fragment,s),X=c(s,"P",{});var pe=i(X);Sn=o(pe,"You may also need to increase the max request body size in kestrel to allow large file uploads like so:"),pe.forEach(n),Ws=F(s),$(j.$$.fragment,s),R=c(s,"H2",{id:!0,tabindex:!0});var Qn=i(R);$(H.$$.fragment,Qn),Tn=o(Qn," Sending File Responses"),Qn.forEach(n),zs=F(s),Z=c(s,"P",{});var re=i(Z);kn=o(re,"There are 3 methods you can use to send file data down to the client."),re.forEach(n),Ys=F(s),w=c(s,"UL",{});var Bs=i(w);$s=c(Bs,"LI",{});var Be=i($s);G=c(Be,"P",{});var Rs=i(G);Cs=c(Rs,"STRONG",{});var ce=i(Cs);Rn=o(ce,"SendStreamAsync()"),ce.forEach(n),In=o(Rs," - supply a "),Es=c(Rs,"STRONG",{});var ie=i(Es);qn=o(ie,"System.IO.Stream"),ie.forEach(n),On=o(Rs," to this method for reading binary data from."),Rs.forEach(n),Be.forEach(n),Pn=F(Bs),Ds=c(Bs,"LI",{});var ye=i(Ds);U=c(ye,"P",{});var Is=i(U);gs=c(Is,"STRONG",{});var fe=i(gs);xn=o(fe,"SendFileAsync()"),fe.forEach(n),Nn=o(Is," - supply a "),bs=c(Is,"STRONG",{});var Fe=i(bs);Hn=o(Fe,"System.IO.FileInfo"),Fe.forEach(n),Gn=o(Is," instance as the source of the binary data."),Is.forEach(n),ye.forEach(n),Un=F(Bs),_s=c(Bs,"LI",{});var Ae=i(_s);ss=c(Ae,"P",{});var Xn=i(ss);vs=c(Xn,"STRONG",{});var de=i(vs);Ln=o(de,"SendBytesAsync()"),de.forEach(n),Mn=o(Xn," - supply a byte array as the source of data to be sent to the client."),Xn.forEach(n),Ae.forEach(n),Bs.forEach(n),js=F(s),ns=c(s,"P",{});var ue=i(ns);Wn=o(ue,"All 3 methods allow you to optionally specify the content-type and file name."),ue.forEach(n),Ks=F(s),es=c(s,"P",{});var me=i(es);zn=o(me,"If file name is specified, the Content-Disposition: attachment response header will be set with the given file name so that a file download will be initiated by the client/browser."),me.forEach(n),Vs=F(s),as=c(s,"P",{});var he=i(as);Yn=o(he,"Range requests/ partial responses are also supported by setting the enableRangeProcessing parameter to true."),he.forEach(n),Js=F(s),I=c(s,"H2",{id:!0,tabindex:!0});var Zn=i(I);$(L.$$.fragment,Zn),jn=o(Zn," Write To Response Stream"),Zn.forEach(n),Qs=F(s),ls=c(s,"P",{});var $e=i(ls);Kn=o($e,"Instead of using the above methods, you also have the choice of writing directly to the http response stream."),$e.forEach(n),Xs=F(s),$(M.$$.fragment,s),this.h()},h(){S(A,"id","handling-file-uploads"),S(A,"tabindex","-1"),S(T,"id","binding-files-to-dto"),S(T,"tabindex","-1"),S(k,"id","handling-large-file-uploads-without-buffering"),S(k,"tabindex","-1"),S(R,"id","sending-file-responses"),S(R,"tabindex","-1"),S(I,"id","write-to-response-stream"),S(I,"tabindex","-1")},m(s,a){r(s,p,a),e(p,y),r(s,m,a),r(s,A,a),C(u,A,null),e(A,J),r(s,qs,a),r(s,Q,a),e(Q,nn),r(s,Os,a),C(W,s,a),r(s,q,a),e(q,en),e(q,is),e(is,an),e(q,ln),r(s,Ps,a),r(s,O,a),e(O,on),e(O,ys),e(ys,tn),e(O,pn),r(s,xs,a),r(s,b,a),e(b,rn),e(b,fs),e(fs,Bn),e(b,cn),e(b,Fs),e(Fs,yn),e(b,fn),r(s,Ns,a),r(s,T,a),C(P,T,null),e(T,Fn),r(s,Hs,a),r(s,x,a),e(x,An),e(x,As),e(As,dn),e(x,un),r(s,Gs,a),C(z,s,a),r(s,k,a),C(N,k,null),e(k,mn),r(s,Us,a),r(s,_,a),e(_,hn),e(_,ds),e(ds,$n),e(_,Cn),e(_,us),e(us,En),e(_,Dn),r(s,Ls,a),r(s,v,a),e(v,gn),e(v,ms),e(ms,bn),e(v,_n),e(v,hs),e(hs,vn),e(v,wn),r(s,Ms,a),C(Y,s,a),r(s,X,a),e(X,Sn),r(s,Ws,a),C(j,s,a),r(s,R,a),C(H,R,null),e(R,Tn),r(s,zs,a),r(s,Z,a),e(Z,kn),r(s,Ys,a),r(s,w,a),e(w,$s),e($s,G),e(G,Cs),e(Cs,Rn),e(G,In),e(G,Es),e(Es,qn),e(G,On),e(w,Pn),e(w,Ds),e(Ds,U),e(U,gs),e(gs,xn),e(U,Nn),e(U,bs),e(bs,Hn),e(U,Gn),e(w,Un),e(w,_s),e(_s,ss),e(ss,vs),e(vs,Ln),e(ss,Mn),r(s,js,a),r(s,ns,a),e(ns,Wn),r(s,Ks,a),r(s,es,a),e(es,zn),r(s,Vs,a),r(s,as,a),e(as,Yn),r(s,Js,a),r(s,I,a),C(L,I,null),e(I,jn),r(s,Qs,a),r(s,ls,a),e(ls,Kn),r(s,Xs,a),C(M,s,a),ws=!0},p(s,[a]){(!ws||a&1)&&t!==(t=s[0].title+"")&&ge(y,t);const os={};a&2&&(os.$$scope={dirty:a,ctx:s}),u.$set(os);const Ss={};a&2&&(Ss.$$scope={dirty:a,ctx:s}),P.$set(Ss);const K={};a&2&&(K.$$scope={dirty:a,ctx:s}),N.$set(K);const Ts={};a&2&&(Ts.$$scope={dirty:a,ctx:s}),H.$set(Ts);const V={};a&2&&(V.$$scope={dirty:a,ctx:s}),L.$set(V);const ks={};a&2&&(ks.$$scope={dirty:a,ctx:s}),M.$set(ks)},i(s){ws||(E(u.$$.fragment,s),E(W.$$.fragment,s),E(P.$$.fragment,s),E(z.$$.fragment,s),E(N.$$.fragment,s),E(Y.$$.fragment,s),E(j.$$.fragment,s),E(H.$$.fragment,s),E(L.$$.fragment,s),E(M.$$.fragment,s),ws=!0)},o(s){D(u.$$.fragment,s),D(W.$$.fragment,s),D(P.$$.fragment,s),D(z.$$.fragment,s),D(N.$$.fragment,s),D(Y.$$.fragment,s),D(j.$$.fragment,s),D(H.$$.fragment,s),D(L.$$.fragment,s),D(M.$$.fragment,s),ws=!1},d(s){s&&n(p),s&&n(m),s&&n(A),g(u),s&&n(qs),s&&n(Q),s&&n(Os),g(W,s),s&&n(q),s&&n(Ps),s&&n(O),s&&n(xs),s&&n(b),s&&n(Ns),s&&n(T),g(P),s&&n(Hs),s&&n(x),s&&n(Gs),g(z,s),s&&n(k),g(N),s&&n(Us),s&&n(_),s&&n(Ls),s&&n(v),s&&n(Ms),g(Y,s),s&&n(X),s&&n(Ws),g(j,s),s&&n(R),g(H),s&&n(zs),s&&n(Z),s&&n(Ys),s&&n(w),s&&n(js),s&&n(ns),s&&n(Ks),s&&n(es),s&&n(Vs),s&&n(as),s&&n(Js),s&&n(I),g(L),s&&n(Qs),s&&n(ls),s&&n(Xs),g(M,s)}}}function Pe(d,p,t){let y;return be(d,_e,m=>t(0,y=m)),[y]}class We extends Ce{constructor(p){super(),Ee(this,p,Pe,Oe,De,{})}}export{We as default};
