import{S as $n,i as Cn,s as mn,l as B,r as t,a as F,w as h,m as c,n as i,u as r,h as n,c as A,x as $,p as d,b as o,M as p,y as C,v as vn,f as m,t as v,B as E,_ as En}from"../../chunks/index-98cfa7ad.js";import{f as Dn}from"../../chunks/scroll-1be19199.js";import{C as ys}from"../../chunks/CodeFence-182ee1eb.js";import{L as ss}from"../../chunks/Link-76ffd583.js";import"../../chunks/singletons-9aa31187.js";import"../../chunks/contexts-ec7bfa4f.js";function bn(f){let l;return{c(){l=t("#")},l(a){l=r(a,"#")},m(a,y){o(a,l,y)},d(a){a&&n(l)}}}function _n(f){let l;return{c(){l=t("#")},l(a){l=r(a,"#")},m(a,y){o(a,l,y)},d(a){a&&n(l)}}}function wn(f){let l;return{c(){l=t("#")},l(a){l=r(a,"#")},m(a,y){o(a,l,y)},d(a){a&&n(l)}}}function kn(f){let l;return{c(){l=t("#")},l(a){l=r(a,"#")},m(a,y){o(a,l,y)},d(a){a&&n(l)}}}function gn(f){let l;return{c(){l=t("#")},l(a){l=r(a,"#")},m(a,y){o(a,l,y)},d(a){a&&n(l)}}}function Tn(f){let l;return{c(){l=t("#")},l(a){l=r(a,"#")},m(a,y){o(a,l,y)},d(a){a&&n(l)}}}function On(f){let l,a=f[0].title+"",y,j,b,O,Ts,fs,P,Os,ns,Ps,xs,Fs,z,Hs,As,_,x,Is,us,J,Ms,ds,N,w,H,Ss,hs,K,Rs,$s,G,k,I,qs,Cs,M,Ns,es,Gs,Ls,ms,L,g,S,Ws,vs,u,Vs,as,Us,js,ls,zs,Js,os,Ks,Qs,ps,Xs,Ys,Es,Q,Zs,Ds,W,R,sn,ts,nn,en,bs,T,q,an,_s,X,ln,ws,V,rs;return O=new ss({props:{class:"header-anchor",href:"#in-process-pub-sub-notifications","aria-hidden":"true",$$slots:{default:[bn]},$$scope:{ctx:f}}}),x=new ss({props:{class:"header-anchor",href:"#_1-define-an-event-model-dto","aria-hidden":"true",$$slots:{default:[_n]},$$scope:{ctx:f}}}),N=new ys({props:{lang:"csharp",ext:"cs",linesCount:7,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">OrderCreatedEvent</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> OrderID { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> CustomerName { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">decimal</span><span style="color: #ABB2BF"> OrderTotal { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),H=new ss({props:{class:"header-anchor",href:"#_2-define-an-event-handler","aria-hidden":"true",$$slots:{default:[wn]},$$scope:{ctx:f}}}),G=new ys({props:{lang:"csharp",ext:"cs",linesCount:10,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">OrderCreationHandler</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">FastEventHandler</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">OrderCreatedEvent</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">OrderCreatedEvent</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">eventModel</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">logger</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Resolve</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">ILogger</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">OrderCreationHandler</span><span style="color: #ABB2BF">&gt;&gt;();</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">logger</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">LogInformation</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">$&quot;order created event received:[{</span><span style="color: #E5C07B">eventModel</span><span style="color: #98C379">.</span><span style="color: #E5C07B">OrderID</span><span style="color: #98C379">}]&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">CompletedTask</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),I=new ss({props:{class:"header-anchor",href:"#_3-publish-the-event","aria-hidden":"true",$$slots:{default:[kn]},$$scope:{ctx:f}}}),L=new ys({props:{lang:"csharp",ext:"cs",linesCount:23,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">CreateOrderEndpoint</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">Endpoint</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">CreateOrderRequest</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Verbs</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">Http</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">POST</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Routes</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/sales/orders/create&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">CreateOrderRequest</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">orderID</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">orderRepo</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">CreateNewOrder</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">req</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">PublishAsync</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">OrderCreatedEvent</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E06C75">OrderID</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">orderID</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E06C75">CustomerName</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Customer</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E06C75">OrderTotal</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">OrderValue</span></span>
<span class="line"><span style="color: #ABB2BF">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">SendOkAsync</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),S=new ss({props:{class:"header-anchor",href:"#the-publishasync-method","aria-hidden":"true",$$slots:{default:[gn]},$$scope:{ctx:f}}}),W=new ys({props:{lang:"csharp",ext:"cs",linesCount:2,code:`<pre><code><span class="line"><span style="color: #E5C07B">await</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">PublishAsync</span><span style="color: #ABB2BF">(eventModel, Mode.WaitForNone);</span></span>
<span class="line"></span></code></pre>`}}),q=new ss({props:{class:"header-anchor",href:"#publishing-from-event-handlers","aria-hidden":"true",$$slots:{default:[Tn]},$$scope:{ctx:f}}}),V=new ys({props:{lang:"csharp",ext:"cs",linesCount:12,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">OrderCreationHandler</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">FastEventHandler</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">OrderCreatedEvent</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">OrderCreatedEvent</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">eventModel</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">PublishAsync</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ReOrderLevelReachedEvent</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E06C75">ItemId</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&quot;ITM-0001&quot;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E06C75">CurrentLevel</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">        });</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),{c(){l=B("h1"),y=t(a),j=F(),b=B("h2"),h(O.$$.fragment),Ts=t(" In-Process Pub/Sub Notifications"),fs=F(),P=B("p"),Os=t("If you'd like to take an event driven approach to building your application, you have the option to publish events from your endpoint handlers and have completely decoupled "),ns=B("strong"),Ps=t("event-handlers"),xs=t(" to take action when events are published."),Fs=F(),z=B("p"),Hs=t("It's a simple 3 step process to do event driven work."),As=F(),_=B("h3"),h(x.$$.fragment),Is=t(" 1. Define an Event Model/ DTO"),us=F(),J=B("p"),Ms=t("This is the data contract that will be communicated across processes."),ds=F(),h(N.$$.fragment),w=B("h3"),h(H.$$.fragment),Ss=t(" 2. Define an Event Handler"),hs=F(),K=B("p"),Rs=t("This is the code that will be fired/executed when events of the above DTO type gets published."),$s=F(),h(G.$$.fragment),k=B("h3"),h(I.$$.fragment),qs=t(" 3. Publish The Event"),Cs=F(),M=B("p"),Ns=t("Simply hand in an event model/dto to the "),es=B("strong"),Gs=t("PublishAsync()"),Ls=t(" method."),ms=F(),h(L.$$.fragment),g=B("h2"),h(S.$$.fragment),Ws=t(" The PublishAsync() Method"),vs=F(),u=B("p"),Vs=t("The "),as=B("strong"),Us=t("PublishAsync()"),js=t(" method has an overload that will take a Mode enum that lets you specify whether to wait for "),ls=B("strong"),zs=t("all subscribers"),Js=t(" to finish; wait for "),os=B("strong"),Ks=t("any subscriber"),Qs=t(" to finish; or wait for "),ps=B("strong"),Xs=t("none of the subscribers"),Ys=t(" to finish."),Es=F(),Q=B("p"),Zs=t("For example, you can publish an event in a fire-n-forget manner with the following:"),Ds=F(),h(W.$$.fragment),R=B("p"),sn=t("The default mode is "),ts=B("strong"),nn=t("Mode.WaitForAll"),en=t(" which will await all subscribers. i.e. execution will only continue after each and every subscriber of the event has completed their work."),bs=F(),T=B("h2"),h(q.$$.fragment),an=t(" Publishing From Event Handlers"),_s=F(),X=B("p"),ln=t("It is also possible to publish events from within event handlers themselves like so:"),ws=F(),h(V.$$.fragment),this.h()},l(s){l=c(s,"H1",{});var e=i(l);y=r(e,a),e.forEach(n),j=A(s),b=c(s,"H2",{id:!0,tabindex:!0});var Y=i(b);$(O.$$.fragment,Y),Ts=r(Y," In-Process Pub/Sub Notifications"),Y.forEach(n),fs=A(s),P=c(s,"P",{});var U=i(P);Os=r(U,"If you'd like to take an event driven approach to building your application, you have the option to publish events from your endpoint handlers and have completely decoupled "),ns=c(U,"STRONG",{});var Bs=i(ns);Ps=r(Bs,"event-handlers"),Bs.forEach(n),xs=r(U," to take action when events are published."),U.forEach(n),Fs=A(s),z=c(s,"P",{});var cs=i(z);Hs=r(cs,"It's a simple 3 step process to do event driven work."),cs.forEach(n),As=A(s),_=c(s,"H3",{id:!0,tabindex:!0});var Z=i(_);$(x.$$.fragment,Z),Is=r(Z," 1. Define an Event Model/ DTO"),Z.forEach(n),us=A(s),J=c(s,"P",{});var is=i(J);Ms=r(is,"This is the data contract that will be communicated across processes."),is.forEach(n),ds=A(s),$(N.$$.fragment,s),w=c(s,"H3",{id:!0,tabindex:!0});var on=i(w);$(H.$$.fragment,on),Ss=r(on," 2. Define an Event Handler"),on.forEach(n),hs=A(s),K=c(s,"P",{});var Bn=i(K);Rs=r(Bn,"This is the code that will be fired/executed when events of the above DTO type gets published."),Bn.forEach(n),$s=A(s),$(G.$$.fragment,s),k=c(s,"H3",{id:!0,tabindex:!0});var pn=i(k);$(I.$$.fragment,pn),qs=r(pn," 3. Publish The Event"),pn.forEach(n),Cs=A(s),M=c(s,"P",{});var ks=i(M);Ns=r(ks,"Simply hand in an event model/dto to the "),es=c(ks,"STRONG",{});var cn=i(es);Gs=r(cn,"PublishAsync()"),cn.forEach(n),Ls=r(ks," method."),ks.forEach(n),ms=A(s),$(L.$$.fragment,s),g=c(s,"H2",{id:!0,tabindex:!0});var tn=i(g);$(S.$$.fragment,tn),Ws=r(tn," The PublishAsync() Method"),tn.forEach(n),vs=A(s),u=c(s,"P",{});var D=i(u);Vs=r(D,"The "),as=c(D,"STRONG",{});var yn=i(as);Us=r(yn,"PublishAsync()"),yn.forEach(n),js=r(D," method has an overload that will take a Mode enum that lets you specify whether to wait for "),ls=c(D,"STRONG",{});var fn=i(ls);zs=r(fn,"all subscribers"),fn.forEach(n),Js=r(D," to finish; wait for "),os=c(D,"STRONG",{});var Fn=i(os);Ks=r(Fn,"any subscriber"),Fn.forEach(n),Qs=r(D," to finish; or wait for "),ps=c(D,"STRONG",{});var An=i(ps);Xs=r(An,"none of the subscribers"),An.forEach(n),Ys=r(D," to finish."),D.forEach(n),Es=A(s),Q=c(s,"P",{});var un=i(Q);Zs=r(un,"For example, you can publish an event in a fire-n-forget manner with the following:"),un.forEach(n),Ds=A(s),$(W.$$.fragment,s),R=c(s,"P",{});var gs=i(R);sn=r(gs,"The default mode is "),ts=c(gs,"STRONG",{});var dn=i(ts);nn=r(dn,"Mode.WaitForAll"),dn.forEach(n),en=r(gs," which will await all subscribers. i.e. execution will only continue after each and every subscriber of the event has completed their work."),gs.forEach(n),bs=A(s),T=c(s,"H2",{id:!0,tabindex:!0});var rn=i(T);$(q.$$.fragment,rn),an=r(rn," Publishing From Event Handlers"),rn.forEach(n),_s=A(s),X=c(s,"P",{});var hn=i(X);ln=r(hn,"It is also possible to publish events from within event handlers themselves like so:"),hn.forEach(n),ws=A(s),$(V.$$.fragment,s),this.h()},h(){d(b,"id","in-process-pub-sub-notifications"),d(b,"tabindex","-1"),d(_,"id","_1-define-an-event-model-dto"),d(_,"tabindex","-1"),d(w,"id","_2-define-an-event-handler"),d(w,"tabindex","-1"),d(k,"id","_3-publish-the-event"),d(k,"tabindex","-1"),d(g,"id","the-publishasync-method"),d(g,"tabindex","-1"),d(T,"id","publishing-from-event-handlers"),d(T,"tabindex","-1")},m(s,e){o(s,l,e),p(l,y),o(s,j,e),o(s,b,e),C(O,b,null),p(b,Ts),o(s,fs,e),o(s,P,e),p(P,Os),p(P,ns),p(ns,Ps),p(P,xs),o(s,Fs,e),o(s,z,e),p(z,Hs),o(s,As,e),o(s,_,e),C(x,_,null),p(_,Is),o(s,us,e),o(s,J,e),p(J,Ms),o(s,ds,e),C(N,s,e),o(s,w,e),C(H,w,null),p(w,Ss),o(s,hs,e),o(s,K,e),p(K,Rs),o(s,$s,e),C(G,s,e),o(s,k,e),C(I,k,null),p(k,qs),o(s,Cs,e),o(s,M,e),p(M,Ns),p(M,es),p(es,Gs),p(M,Ls),o(s,ms,e),C(L,s,e),o(s,g,e),C(S,g,null),p(g,Ws),o(s,vs,e),o(s,u,e),p(u,Vs),p(u,as),p(as,Us),p(u,js),p(u,ls),p(ls,zs),p(u,Js),p(u,os),p(os,Ks),p(u,Qs),p(u,ps),p(ps,Xs),p(u,Ys),o(s,Es,e),o(s,Q,e),p(Q,Zs),o(s,Ds,e),C(W,s,e),o(s,R,e),p(R,sn),p(R,ts),p(ts,nn),p(R,en),o(s,bs,e),o(s,T,e),C(q,T,null),p(T,an),o(s,_s,e),o(s,X,e),p(X,ln),o(s,ws,e),C(V,s,e),rs=!0},p(s,[e]){(!rs||e&1)&&a!==(a=s[0].title+"")&&vn(y,a);const Y={};e&2&&(Y.$$scope={dirty:e,ctx:s}),O.$set(Y);const U={};e&2&&(U.$$scope={dirty:e,ctx:s}),x.$set(U);const Bs={};e&2&&(Bs.$$scope={dirty:e,ctx:s}),H.$set(Bs);const cs={};e&2&&(cs.$$scope={dirty:e,ctx:s}),I.$set(cs);const Z={};e&2&&(Z.$$scope={dirty:e,ctx:s}),S.$set(Z);const is={};e&2&&(is.$$scope={dirty:e,ctx:s}),q.$set(is)},i(s){rs||(m(O.$$.fragment,s),m(x.$$.fragment,s),m(N.$$.fragment,s),m(H.$$.fragment,s),m(G.$$.fragment,s),m(I.$$.fragment,s),m(L.$$.fragment,s),m(S.$$.fragment,s),m(W.$$.fragment,s),m(q.$$.fragment,s),m(V.$$.fragment,s),rs=!0)},o(s){v(O.$$.fragment,s),v(x.$$.fragment,s),v(N.$$.fragment,s),v(H.$$.fragment,s),v(G.$$.fragment,s),v(I.$$.fragment,s),v(L.$$.fragment,s),v(S.$$.fragment,s),v(W.$$.fragment,s),v(q.$$.fragment,s),v(V.$$.fragment,s),rs=!1},d(s){s&&n(l),s&&n(j),s&&n(b),E(O),s&&n(fs),s&&n(P),s&&n(Fs),s&&n(z),s&&n(As),s&&n(_),E(x),s&&n(us),s&&n(J),s&&n(ds),E(N,s),s&&n(w),E(H),s&&n(hs),s&&n(K),s&&n($s),E(G,s),s&&n(k),E(I),s&&n(Cs),s&&n(M),s&&n(ms),E(L,s),s&&n(g),E(S),s&&n(vs),s&&n(u),s&&n(Es),s&&n(Q),s&&n(Ds),E(W,s),s&&n(R),s&&n(bs),s&&n(T),E(q),s&&n(_s),s&&n(X),s&&n(ws),E(V,s)}}}function Pn(f,l,a){let y;return En(f,Dn,j=>a(0,y=j)),[y]}class qn extends $n{constructor(l){super(),Cn(this,l,Pn,On,mn,{})}}export{qn as default};
