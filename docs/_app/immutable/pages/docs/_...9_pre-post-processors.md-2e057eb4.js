import{S as sa,i as na,s as aa,l as B,r as o,a as i,w as u,m as c,n as y,u as p,h as n,c as F,x as f,p as D,b as e,M as l,y as E,v as ea,f as d,t as m,B as $,_ as la}from"../../chunks/index-98cfa7ad.js";import{f as oa}from"../../chunks/scroll-1be19199.js";import{C as H}from"../../chunks/CodeFence-182ee1eb.js";import{L as Ds}from"../../chunks/Link-76ffd583.js";import"../../chunks/singletons-9aa31187.js";import"../../chunks/contexts-ec7bfa4f.js";function pa(C){let r;return{c(){r=o("#")},l(t){r=p(t,"#")},m(t,A){e(t,r,A)},d(t){t&&n(r)}}}function ta(C){let r;return{c(){r=o("#")},l(t){r=p(t,"#")},m(t,A){e(t,r,A)},d(t){t&&n(r)}}}function ra(C){let r;return{c(){r=o("#")},l(t){r=p(t,"#")},m(t,A){e(t,r,A)},d(t){t&&n(r)}}}function Ba(C){let r;return{c(){r=o("#")},l(t){r=p(t,"#")},m(t,A){e(t,r,A)},d(t){t&&n(r)}}}function ca(C){let r;return{c(){r=o("#")},l(t){r=p(t,"#")},m(t,A){e(t,r,A)},d(t){t&&n(r)}}}function ya(C){let r,t=C[0].title+"",A,J,K,Js,gs,Q,Ks,bs,v,rs,Bs,Qs,Xs,cs,ys,Zs,qs,g,T,sn,Ps,X,nn,Rs,_,an,is,en,ln,vs,G,Z,on,Ts,M,ss,pn,_s,N,b,w,tn,ws,ns,rn,xs,V,x,Bn,Fs,cn,yn,ks,k,Fn,As,An,Cn,Ss,q,S,un,Ls,L,fn,Cs,En,dn,Is,Y,as,mn,Os,U,P,I,$n,Hs,h,hn,us,Dn,gn,fs,bn,qn,Gs,es,Pn,Ms,R,O,Rn,Ns,ls,vn,Vs,W,os,Tn,Ys,j,ps,_n,Es;return T=new Ds({props:{class:"header-anchor",href:"#pre-processors","aria-hidden":"true",$$slots:{default:[pa]},$$scope:{ctx:C}}}),G=new H({props:{title:"MyRequestLogger.cs",lang:"csharp",ext:"cs",linesCount:12,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyRequestLogger</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">TRequest</span><span style="color: #ABB2BF">&gt; : </span><span style="color: #E5C07B">IPreProcessor</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">TRequest</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">PreProcessAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">TRequest</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">HttpContext</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ctx</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">List</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">ValidationFailure</span><span style="color: #ABB2BF">&gt; </span><span style="color: #E5C07B">failures</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">logger</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ctx</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">RequestServices</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">GetRequiredService</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">ILogger</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">TRequest</span><span style="color: #ABB2BF">&gt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">logger</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">LogInformation</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">$&quot;request:{</span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">?</span><span style="color: #98C379">.</span><span style="color: #61AFEF">GetType</span><span style="color: #98C379">().</span><span style="color: #E5C07B">FullName</span><span style="color: #98C379">} path: {</span><span style="color: #E5C07B">ctx</span><span style="color: #98C379">.</span><span style="color: #E5C07B">Request</span><span style="color: #98C379">.</span><span style="color: #E5C07B">Path</span><span style="color: #98C379">}&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">CompletedTask</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),M=new H({props:{title:"CreateOrderEndpoint.cs",lang:"csharp",ext:"cs",linesCount:10,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">CreateOrderEndpoint</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">Endpoint</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">CreateOrderRequest</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Verbs</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">Http</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">POST</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Routes</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/sales/orders/create&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">PreProcessors</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyRequestLogger</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">CreateOrderRequest</span><span style="color: #ABB2BF">&gt;()); </span><span style="color: #7F848E; font-style: italic">// add this</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),N=new H({props:{title:"SalesRequestLogger.cs",lang:"csharp",ext:"cs",linesCount:12,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">SalesRequestLogger</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">IPreProcessor</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">CreateSaleRequest</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">PreProcessAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">CreateSaleRequest</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">HttpContext</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ctx</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">List</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">ValidationFailure</span><span style="color: #ABB2BF">&gt; </span><span style="color: #E5C07B">failures</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">logger</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ctx</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">RequestServices</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">GetRequiredService</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">ILogger</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">CreateSaleRequest</span><span style="color: #ABB2BF">&gt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">logger</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">LogInformation</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">$&quot;sale value:{</span><span style="color: #E5C07B">req</span><span style="color: #98C379">.</span><span style="color: #E5C07B">SaleValue</span><span style="color: #98C379">}&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">CompletedTask</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),w=new Ds({props:{class:"header-anchor",href:"#short-circuiting-execution","aria-hidden":"true",$$slots:{default:[ta]},$$scope:{ctx:C}}}),V=new H({props:{lang:"csharp",ext:"cs",linesCount:19,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">SecurityProcessor</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">TRequest</span><span style="color: #ABB2BF">&gt; : </span><span style="color: #E5C07B">IPreProcessor</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">TRequest</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">PreProcessAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">TRequest</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">HttpContext</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ctx</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">List</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">ValidationFailure</span><span style="color: #ABB2BF">&gt; </span><span style="color: #E5C07B">failures</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">tenantID</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ctx</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Request</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Headers</span><span style="color: #ABB2BF">[</span><span style="color: #98C379">&quot;tenant-id&quot;</span><span style="color: #ABB2BF">].</span><span style="color: #61AFEF">FirstOrDefault</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75">tenantID</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">failures</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">Add</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">new</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;MissingHeaders&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&quot;The [tenant-id] header needs to be set!&quot;</span><span style="color: #ABB2BF">));</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ctx</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Response</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">SendErrorsAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">failures</span><span style="color: #ABB2BF">); </span><span style="color: #7F848E; font-style: italic">//sending response here</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75">tenantID</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">!=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&quot;qwerty&quot;</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ctx</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Response</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">SendForbiddenAsync</span><span style="color: #ABB2BF">(); </span><span style="color: #7F848E; font-style: italic">//sending response here</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">CompletedTask</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),S=new Ds({props:{class:"header-anchor",href:"#post-processors","aria-hidden":"true",$$slots:{default:[ra]},$$scope:{ctx:C}}}),Y=new H({props:{lang:"csharp",ext:"cs",linesCount:15,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyResponseLogger</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">TRequest</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">TResponse</span><span style="color: #ABB2BF">&gt; : </span><span style="color: #E5C07B">IPostProcessor</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">TRequest</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">TResponse</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">PostProcessAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">TRequest</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">TResponse</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">res</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">HttpContext</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ctx</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">IReadOnlyCollection</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">ValidationFailure</span><span style="color: #ABB2BF">&gt; </span><span style="color: #E5C07B">failures</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">logger</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ctx</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">RequestServices</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">GetRequiredService</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">ILogger</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">TResponse</span><span style="color: #ABB2BF">&gt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75">res</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">is</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">CreateSaleResponse</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">response</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">logger</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">LogWarning</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">$&quot;sale complete: {</span><span style="color: #E5C07B">response</span><span style="color: #98C379">.</span><span style="color: #E5C07B">OrderID</span><span style="color: #98C379">}&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">CompletedTask</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),U=new H({props:{lang:"csharp",ext:"cs",linesCount:10,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">CreateOrderEndpoint</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">Endpoint</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">CreateSaleRequest</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">CreateSaleResponse</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Verbs</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">Http</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">POST</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Routes</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/sales/orders/create&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">PostProcessors</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyResponseLogger</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">CreateSaleRequest</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">CreateSaleResponse</span><span style="color: #ABB2BF">&gt;());</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),I=new Ds({props:{class:"header-anchor",href:"#multiple-processors","aria-hidden":"true",$$slots:{default:[Ba]},$$scope:{ctx:C}}}),O=new Ds({props:{class:"header-anchor",href:"#global-processors-filters","aria-hidden":"true",$$slots:{default:[ca]},$$scope:{ctx:C}}}),W=new H({props:{lang:"csharp",ext:"cs",linesCount:2,code:`<pre><code><span class="line"><span style="color: #E5C07B">app</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">UseMiddleware</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">MyMiddleware</span><span style="color: #ABB2BF">&gt;();</span></span>
<span class="line"></span></code></pre>`}}),j=new H({props:{lang:"csharp",ext:"cs",linesCount:25,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">abstract</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">PublicEndpoint</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">TRequest</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">TResponse</span><span style="color: #ABB2BF">&gt; : </span><span style="color: #E5C07B">Endpoint</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">TRequest</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">TResponse</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #C678DD">where</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">TRequest</span><span style="color: #ABB2BF"> : </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #C678DD">where</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">TResponse</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">notnull</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">PreProcessors</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyRequestLogger</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">TRequest</span><span style="color: #ABB2BF">&gt;());</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">AllowAnonymous</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyEndpoint</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">PublicEndpoint</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">EmptyRequest</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">EmptyResponse</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Get</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;test/global-preprocessor&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">base</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">EmptyRequest</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">req</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">SendOkAsync</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),{c(){r=B("h1"),A=o(t),J=i(),K=B("p"),Js=o("Rather than writing a common piece of logic repeatedly that must be executed either before or after each request to your system, you can write it as a processor and attach it to endpoints that need them."),gs=i(),Q=B("p"),Ks=o("There are two types of processors:"),bs=i(),v=B("ul"),rs=B("li"),Bs=B("strong"),Qs=o("pre-processors"),Xs=i(),cs=B("li"),ys=B("strong"),Zs=o("post-processors"),qs=i(),g=B("h2"),u(T.$$.fragment),sn=o(" Pre Processors"),Ps=i(),X=B("p"),nn=o("Let's say for example that you'd like to log every request before being executed by your endpoint handlers."),Rs=i(),_=B("p"),an=o("You can simply write a pre-processor like below by implementing the interface "),is=B("strong"),en=o("IPreProcessor<TRequest>"),ln=o(":"),vs=i(),u(G.$$.fragment),Z=B("p"),on=o("And then attach it to the endpoints you need like so:"),Ts=i(),u(M.$$.fragment),ss=B("p"),pn=o("You can even write a request DTO specific processor like so:"),_s=i(),u(N.$$.fragment),b=B("h2"),u(w.$$.fragment),tn=o(" Short-Circuiting Execution"),ws=i(),ns=B("p"),rn=o("It is possible to end processing the request by returning a response from within a pre-processor like so:"),xs=i(),u(V.$$.fragment),x=B("p"),Bn=o(`All the Send* methods supported by endpoint handlers are available.
The send methods are accessed from the `),Fs=B("strong"),cn=o("ctx.Response"),yn=o(` property as shown above.
When a response is sent from a pre-processor, the handler method is not executed.`),ks=i(),k=B("p"),Fn=o("However, if there are multiple pre-processors configured, they will be executed. if another pre-processor also wants to send a response, they must check if it's possible to do so by checking the property "),As=B("strong"),An=o("ctx.Response.HasStarted"),Cn=o(" to see if a previously executed pre-processor has already sent a response to the client."),Ss=i(),q=B("h2"),u(S.$$.fragment),un=o(" Post Processors"),Ls=i(),L=B("p"),fn=o(`Post-processors are executed after your endpoint handler has completed it's work.
They can be created similarly by implementing the interface `),Cs=B("strong"),En=o("IPostProcessor<TRequest, TResponse>"),dn=o(":"),Is=i(),u(Y.$$.fragment),as=B("p"),mn=o("And then attach it to endpoints like so:"),Os=i(),u(U.$$.fragment),P=B("h2"),u(I.$$.fragment),$n=o(" Multiple Processors"),Hs=i(),h=B("p"),hn=o("You can attach multiple processors with both "),us=B("strong"),Dn=o("PreProcessors()"),gn=o(" and "),fs=B("strong"),bn=o("PostProcessors()"),qn=o(" methods."),Gs=i(),es=B("p"),Pn=o("The processors are executed in the order they are supplied to the methods."),Ms=i(),R=B("h2"),u(O.$$.fragment),Rn=o(" Global Processors/ Filters"),Ns=i(),ls=B("p"),vn=o("The recommended approach for global filters/ processors is to write that logic as a middleware and register it in the ASP.NET pipeline like so:"),Vs=i(),u(W.$$.fragment),os=B("p"),Tn=o("As an alternative to that, you can write a base endpoint like below which includes a processor and derive your endpoint classes from that."),Ys=i(),u(j.$$.fragment),ps=B("p"),_n=o("This approach is also helpful if you'd like to configure several endpoints with the same base configuration."),this.h()},l(s){r=c(s,"H1",{});var a=y(r);A=p(a,t),a.forEach(n),J=F(s),K=c(s,"P",{});var ds=y(K);Js=p(ds,"Rather than writing a common piece of logic repeatedly that must be executed either before or after each request to your system, you can write it as a processor and attach it to endpoints that need them."),ds.forEach(n),gs=F(s),Q=c(s,"P",{});var ms=y(Q);Ks=p(ms,"There are two types of processors:"),ms.forEach(n),bs=F(s),v=c(s,"UL",{});var z=y(v);rs=c(z,"LI",{});var $s=y(rs);Bs=c($s,"STRONG",{});var hs=y(Bs);Qs=p(hs,"pre-processors"),hs.forEach(n),$s.forEach(n),Xs=F(z),cs=c(z,"LI",{});var In=y(cs);ys=c(In,"STRONG",{});var On=y(ys);Zs=p(On,"post-processors"),On.forEach(n),In.forEach(n),z.forEach(n),qs=F(s),g=c(s,"H2",{id:!0,tabindex:!0});var wn=y(g);f(T.$$.fragment,wn),sn=p(wn," Pre Processors"),wn.forEach(n),Ps=F(s),X=c(s,"P",{});var Hn=y(X);nn=p(Hn,"Let's say for example that you'd like to log every request before being executed by your endpoint handlers."),Hn.forEach(n),Rs=F(s),_=c(s,"P",{});var Us=y(_);an=p(Us,"You can simply write a pre-processor like below by implementing the interface "),is=c(Us,"STRONG",{});var Gn=y(is);en=p(Gn,"IPreProcessor<TRequest>"),Gn.forEach(n),ln=p(Us,":"),Us.forEach(n),vs=F(s),f(G.$$.fragment,s),Z=c(s,"P",{});var Mn=y(Z);on=p(Mn,"And then attach it to the endpoints you need like so:"),Mn.forEach(n),Ts=F(s),f(M.$$.fragment,s),ss=c(s,"P",{});var Nn=y(ss);pn=p(Nn,"You can even write a request DTO specific processor like so:"),Nn.forEach(n),_s=F(s),f(N.$$.fragment,s),b=c(s,"H2",{id:!0,tabindex:!0});var xn=y(b);f(w.$$.fragment,xn),tn=p(xn," Short-Circuiting Execution"),xn.forEach(n),ws=F(s),ns=c(s,"P",{});var Vn=y(ns);rn=p(Vn,"It is possible to end processing the request by returning a response from within a pre-processor like so:"),Vn.forEach(n),xs=F(s),f(V.$$.fragment,s),x=c(s,"P",{});var Ws=y(x);Bn=p(Ws,`All the Send* methods supported by endpoint handlers are available.
The send methods are accessed from the `),Fs=c(Ws,"STRONG",{});var Yn=y(Fs);cn=p(Yn,"ctx.Response"),Yn.forEach(n),yn=p(Ws,` property as shown above.
When a response is sent from a pre-processor, the handler method is not executed.`),Ws.forEach(n),ks=F(s),k=c(s,"P",{});var js=y(k);Fn=p(js,"However, if there are multiple pre-processors configured, they will be executed. if another pre-processor also wants to send a response, they must check if it's possible to do so by checking the property "),As=c(js,"STRONG",{});var Un=y(As);An=p(Un,"ctx.Response.HasStarted"),Un.forEach(n),Cn=p(js," to see if a previously executed pre-processor has already sent a response to the client."),js.forEach(n),Ss=F(s),q=c(s,"H2",{id:!0,tabindex:!0});var kn=y(q);f(S.$$.fragment,kn),un=p(kn," Post Processors"),kn.forEach(n),Ls=F(s),L=c(s,"P",{});var zs=y(L);fn=p(zs,`Post-processors are executed after your endpoint handler has completed it's work.
They can be created similarly by implementing the interface `),Cs=c(zs,"STRONG",{});var Wn=y(Cs);En=p(Wn,"IPostProcessor<TRequest, TResponse>"),Wn.forEach(n),dn=p(zs,":"),zs.forEach(n),Is=F(s),f(Y.$$.fragment,s),as=c(s,"P",{});var jn=y(as);mn=p(jn,"And then attach it to endpoints like so:"),jn.forEach(n),Os=F(s),f(U.$$.fragment,s),P=c(s,"H2",{id:!0,tabindex:!0});var Sn=y(P);f(I.$$.fragment,Sn),$n=p(Sn," Multiple Processors"),Sn.forEach(n),Hs=F(s),h=c(s,"P",{});var ts=y(h);hn=p(ts,"You can attach multiple processors with both "),us=c(ts,"STRONG",{});var zn=y(us);Dn=p(zn,"PreProcessors()"),zn.forEach(n),gn=p(ts," and "),fs=c(ts,"STRONG",{});var Jn=y(fs);bn=p(Jn,"PostProcessors()"),Jn.forEach(n),qn=p(ts," methods."),ts.forEach(n),Gs=F(s),es=c(s,"P",{});var Kn=y(es);Pn=p(Kn,"The processors are executed in the order they are supplied to the methods."),Kn.forEach(n),Ms=F(s),R=c(s,"H2",{id:!0,tabindex:!0});var Ln=y(R);f(O.$$.fragment,Ln),Rn=p(Ln," Global Processors/ Filters"),Ln.forEach(n),Ns=F(s),ls=c(s,"P",{});var Qn=y(ls);vn=p(Qn,"The recommended approach for global filters/ processors is to write that logic as a middleware and register it in the ASP.NET pipeline like so:"),Qn.forEach(n),Vs=F(s),f(W.$$.fragment,s),os=c(s,"P",{});var Xn=y(os);Tn=p(Xn,"As an alternative to that, you can write a base endpoint like below which includes a processor and derive your endpoint classes from that."),Xn.forEach(n),Ys=F(s),f(j.$$.fragment,s),ps=c(s,"P",{});var Zn=y(ps);_n=p(Zn,"This approach is also helpful if you'd like to configure several endpoints with the same base configuration."),Zn.forEach(n),this.h()},h(){D(g,"id","pre-processors"),D(g,"tabindex","-1"),D(b,"id","short-circuiting-execution"),D(b,"tabindex","-1"),D(q,"id","post-processors"),D(q,"tabindex","-1"),D(P,"id","multiple-processors"),D(P,"tabindex","-1"),D(R,"id","global-processors-filters"),D(R,"tabindex","-1")},m(s,a){e(s,r,a),l(r,A),e(s,J,a),e(s,K,a),l(K,Js),e(s,gs,a),e(s,Q,a),l(Q,Ks),e(s,bs,a),e(s,v,a),l(v,rs),l(rs,Bs),l(Bs,Qs),l(v,Xs),l(v,cs),l(cs,ys),l(ys,Zs),e(s,qs,a),e(s,g,a),E(T,g,null),l(g,sn),e(s,Ps,a),e(s,X,a),l(X,nn),e(s,Rs,a),e(s,_,a),l(_,an),l(_,is),l(is,en),l(_,ln),e(s,vs,a),E(G,s,a),e(s,Z,a),l(Z,on),e(s,Ts,a),E(M,s,a),e(s,ss,a),l(ss,pn),e(s,_s,a),E(N,s,a),e(s,b,a),E(w,b,null),l(b,tn),e(s,ws,a),e(s,ns,a),l(ns,rn),e(s,xs,a),E(V,s,a),e(s,x,a),l(x,Bn),l(x,Fs),l(Fs,cn),l(x,yn),e(s,ks,a),e(s,k,a),l(k,Fn),l(k,As),l(As,An),l(k,Cn),e(s,Ss,a),e(s,q,a),E(S,q,null),l(q,un),e(s,Ls,a),e(s,L,a),l(L,fn),l(L,Cs),l(Cs,En),l(L,dn),e(s,Is,a),E(Y,s,a),e(s,as,a),l(as,mn),e(s,Os,a),E(U,s,a),e(s,P,a),E(I,P,null),l(P,$n),e(s,Hs,a),e(s,h,a),l(h,hn),l(h,us),l(us,Dn),l(h,gn),l(h,fs),l(fs,bn),l(h,qn),e(s,Gs,a),e(s,es,a),l(es,Pn),e(s,Ms,a),e(s,R,a),E(O,R,null),l(R,Rn),e(s,Ns,a),e(s,ls,a),l(ls,vn),e(s,Vs,a),E(W,s,a),e(s,os,a),l(os,Tn),e(s,Ys,a),E(j,s,a),e(s,ps,a),l(ps,_n),Es=!0},p(s,[a]){(!Es||a&1)&&t!==(t=s[0].title+"")&&ea(A,t);const ds={};a&2&&(ds.$$scope={dirty:a,ctx:s}),T.$set(ds);const ms={};a&2&&(ms.$$scope={dirty:a,ctx:s}),w.$set(ms);const z={};a&2&&(z.$$scope={dirty:a,ctx:s}),S.$set(z);const $s={};a&2&&($s.$$scope={dirty:a,ctx:s}),I.$set($s);const hs={};a&2&&(hs.$$scope={dirty:a,ctx:s}),O.$set(hs)},i(s){Es||(d(T.$$.fragment,s),d(G.$$.fragment,s),d(M.$$.fragment,s),d(N.$$.fragment,s),d(w.$$.fragment,s),d(V.$$.fragment,s),d(S.$$.fragment,s),d(Y.$$.fragment,s),d(U.$$.fragment,s),d(I.$$.fragment,s),d(O.$$.fragment,s),d(W.$$.fragment,s),d(j.$$.fragment,s),Es=!0)},o(s){m(T.$$.fragment,s),m(G.$$.fragment,s),m(M.$$.fragment,s),m(N.$$.fragment,s),m(w.$$.fragment,s),m(V.$$.fragment,s),m(S.$$.fragment,s),m(Y.$$.fragment,s),m(U.$$.fragment,s),m(I.$$.fragment,s),m(O.$$.fragment,s),m(W.$$.fragment,s),m(j.$$.fragment,s),Es=!1},d(s){s&&n(r),s&&n(J),s&&n(K),s&&n(gs),s&&n(Q),s&&n(bs),s&&n(v),s&&n(qs),s&&n(g),$(T),s&&n(Ps),s&&n(X),s&&n(Rs),s&&n(_),s&&n(vs),$(G,s),s&&n(Z),s&&n(Ts),$(M,s),s&&n(ss),s&&n(_s),$(N,s),s&&n(b),$(w),s&&n(ws),s&&n(ns),s&&n(xs),$(V,s),s&&n(x),s&&n(ks),s&&n(k),s&&n(Ss),s&&n(q),$(S),s&&n(Ls),s&&n(L),s&&n(Is),$(Y,s),s&&n(as),s&&n(Os),$(U,s),s&&n(P),$(I),s&&n(Hs),s&&n(h),s&&n(Gs),s&&n(es),s&&n(Ms),s&&n(R),$(O),s&&n(Ns),s&&n(ls),s&&n(Vs),$(W,s),s&&n(os),s&&n(Ys),$(j,s),s&&n(ps)}}}function ia(C,r,t){let A;return la(C,oa,J=>t(0,A=J)),[A]}class da extends sa{constructor(r){super(),na(this,r,ia,ya,aa,{})}}export{da as default};
