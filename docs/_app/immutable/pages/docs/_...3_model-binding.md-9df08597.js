import{S as Br,i as cr,s as ir,l as p,r as a,a as y,w as f,m as r,n as B,u as t,h as e,c as u,x as m,p as _,b as o,M as n,y as d,v as yr,f as F,t as A,B as $,_ as ur,E as fr}from"../../chunks/index-98cfa7ad.js";import{f as mr}from"../../chunks/scroll-1be19199.js";import{C as E}from"../../chunks/CodeFence-182ee1eb.js";import{L as S}from"../../chunks/Link-76ffd583.js";import{A as dr}from"../../chunks/Admonition-d261edcb.js";import"../../chunks/singletons-9aa31187.js";import"../../chunks/contexts-ec7bfa4f.js";function Fr(D){let i;return{c(){i=a("#")},l(c){i=t(c,"#")},m(c,C){o(c,i,C)},d(c){c&&e(i)}}}function Ar(D){let i;return{c(){i=a("here")},l(c){i=t(c,"here")},m(c,C){o(c,i,C)},d(c){c&&e(i)}}}function $r(D){let i;return{c(){i=a("#")},l(c){i=t(c,"#")},m(c,C){o(c,i,C)},d(c){c&&e(i)}}}function Cr(D){let i;return{c(){i=a("#")},l(c){i=t(c,"#")},m(c,C){o(c,i,C)},d(c){c&&e(i)}}}function Dr(D){let i;return{c(){i=a("#")},l(c){i=t(c,"#")},m(c,C){o(c,i,C)},d(c){c&&e(i)}}}function hr(D){let i;return{c(){i=a("#")},l(c){i=t(c,"#")},m(c,C){o(c,i,C)},d(c){c&&e(i)}}}function Er(D){let i;return{c(){i=a("#")},l(c){i=t(c,"#")},m(c,C){o(c,i,C)},d(c){c&&e(i)}}}function br(D){let i;return{c(){i=a("STJ documentation")},l(c){i=t(c,"STJ documentation")},m(c,C){o(c,i,C)},d(c){c&&e(i)}}}function vr(D){let i;return{c(){i=a("#")},l(c){i=t(c,"#")},m(c,C){o(c,i,C)},d(c){c&&e(i)}}}function _r(D){let i,c,C,x,q,R,gs,N,w,qs,I,v,G;return{c(){i=p("p"),c=p("strong"),C=a("Route<T>()"),x=a(" & "),q=p("strong"),R=a("Query<T>()"),gs=a(" methods are also only able to handle types that have a static TryParse() method and/or valid JSON arrays as mentioned above."),N=y(),w=p("p"),qs=a("If there's no static "),I=p("strong"),v=a("TryParse()"),G=a(` method or if parsing fails, an automatic validation failure response is sent to the client.
This behavior can be turned off with the following overload:`)},l(T){i=r(T,"P",{});var P=B(i);c=r(P,"STRONG",{});var V=B(c);C=t(V,"Route<T>()"),V.forEach(e),x=t(P," & "),q=r(P,"STRONG",{});var ce=B(q);R=t(ce,"Query<T>()"),ce.forEach(e),gs=t(P," methods are also only able to handle types that have a static TryParse() method and/or valid JSON arrays as mentioned above."),P.forEach(e),N=u(T),w=r(T,"P",{});var X=B(w);qs=t(X,"If there's no static "),I=r(X,"STRONG",{});var K=B(I);v=t(K,"TryParse()"),K.forEach(e),G=t(X,` method or if parsing fails, an automatic validation failure response is sent to the client.
This behavior can be turned off with the following overload:`),X.forEach(e)},m(T,P){o(T,i,P),n(i,c),n(c,C),n(i,x),n(i,q),n(q,R),n(i,gs),o(T,N,P),o(T,w,P),n(w,qs),n(w,I),n(I,v),n(w,G)},p:fr,d(T){T&&e(i),T&&e(N),T&&e(w)}}}function gr(D){let i;return{c(){i=a("#")},l(c){i=t(c,"#")},m(c,C){o(c,i,C)},d(c){c&&e(i)}}}function qr(D){let i;return{c(){i=a("#")},l(c){i=t(c,"#")},m(c,C){o(c,i,C)},d(c){c&&e(i)}}}function wr(D){let i;return{c(){i=a("configuration settings")},l(c){i=t(c,"configuration settings")},m(c,C){o(c,i,C)},d(c){c&&e(i)}}}function Tr(D){let i;return{c(){i=a("#")},l(c){i=t(c,"#")},m(c,C){o(c,i,C)},d(c){c&&e(i)}}}function Pr(D){let i,c=D[0].title+"",C,x,q,R,gs,N,w,qs,I,v,G,T,P,V,ce,X,K,ca,ia,Me,ya,ua,ws,fa,He,ma,da,Fa,Ts,Aa,Le,$a,Ca,Da,Ps,ha,ze,Ea,ba,Mn,ie,va,Hn,Ss,ye,je,_a,Ln,Rs,ue,ga,zn,Z,qa,Qe,wa,Ta,jn,xs,fe,Pa,Qn,me,Sa,Yn,de,Ra,Wn,Is,Fe,xa,Vn,ss,Ia,es,Oa,Xn,Ae,ka,Kn,Os,U,Ye,Na,Ga,We,Ua,Ja,Zn,ns,Ma,Ve,Ha,La,sl,ks,ls,za,Xe,ja,Qa,el,$e,Ya,nl,Ns,J,as,Wa,ll,Ce,Va,al,Gs,Us,ts,Xa,Ke,Ka,Za,tl,De,Ze,st,ol,he,et,pl,Js,M,os,nt,rl,Ee,lt,Bl,Ms,be,at,cl,H,ps,tt,il,rs,ot,sn,pt,rt,yl,Hs,ve,Bt,ul,Ls,Bs,ct,en,it,yt,fl,zs,L,cs,ut,ml,_e,ft,dl,ge,nn,mt,Fl,js,Qs,ln,dt,Ft,Al,Ys,qe,At,$l,Ws,z,is,$t,Cl,we,an,Ct,Dl,ys,Dt,us,ht,hl,Te,Et,El,Vs,Pe,tn,bt,bl,fs,vt,on,_t,gt,vl,h,pn,qt,wt,rn,Tt,Pt,Bn,St,Rt,cn,xt,It,yn,Ot,kt,un,Nt,Gt,fn,Ut,Jt,mn,Mt,Ht,dn,Lt,zt,Fn,jt,Qt,An,Yt,Wt,$n,Vt,_l,ms,Xt,Cn,Kt,Zt,gl,Xs,O,so,Dn,eo,no,hn,lo,ao,ql,ds,to,En,oo,po,wl,Se,ro,Tl,Ks,Zs,Re,Bo,Pl,xe,co,Sl,Ie,io,Rl,j,Fs,yo,xl,k,uo,bn,fo,mo,vn,Fo,Ao,Il,se,As,Ol,ee,Q,$s,$o,kl,Cs,Co,_n,Do,ho,Nl,ne,Ds,Eo,gn,bo,vo,Gl,Oe,_o,Ul,ke,go,Jl,Y,hs,qo,Ml,Ne,wo,Hl,Es,To,bs,Po,Ll,W,vs,So,zl,_s,Ro,qn,xo,Io,jl,le,wn,Oo,ko,Ql,ae,te,Tn,No,Go,Yl,oe,Pn;return R=new S({props:{class:"header-anchor",href:"#request-dto-binding","aria-hidden":"true",$$slots:{default:[Fr]},$$scope:{ctx:D}}}),Ss=new E({props:{title:"GetUserRequest.cs",lang:"csharp",ext:"cs",linesCount:5,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">GetUserRequest</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> UserID { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),Rs=new E({props:{lang:"text",ext:"text",linesCount:4,code:`<pre><code><span class="line"><span style="color: undefined">  route : /api/user/{UserID}</span></span>
<span class="line"><span style="color: undefined">  url   : /api/user/54321</span></span>
<span class="line"><span style="color: undefined">  json  : { &quot;UserID&quot;: &quot;12345&quot; }</span></span>
<span class="line"><span style="color: undefined"></span></span></code></pre>`}}),xs=new E({props:{title:"GetUserRequest.cs",lang:"csharp",ext:"cs",linesCount:6,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">GetUserRequest</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    [</span><span style="color: #E5C07B">FromClaim</span><span style="color: #ABB2BF">]</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> UserID { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),Is=new E({props:{lang:"csharp",ext:"cs",linesCount:2,code:`<pre><code><span class="line"><span style="color: #ABB2BF">[</span><span style="color: #E5C07B">FromClaim</span><span style="color: #ABB2BF">(IsRequired </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">)]</span></span>
<span class="line"></span></code></pre>`}}),es=new S({props:{href:"https://github.com/dj-nitehawk/FastEndpoints/blob/main/Web/%5BFeatures%5D/Customers/Update/Endpoint.cs",target:"_blank",rel:"noopener noreferrer",$$slots:{default:[Ar]},$$scope:{ctx:D}}}),Os=new E({props:{title:"GetUserRequest.cs",lang:"csharp",ext:"cs",linesCount:6,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">GetUserRequest</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    [</span><span style="color: #E5C07B">FromHeader</span><span style="color: #ABB2BF">]</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> TenantID { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),ks=new E({props:{title:"UpdateArticleRequest.cs",lang:"csharp",ext:"cs",linesCount:6,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">UpdateArticleRequest</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    [</span><span style="color: #E5C07B">HasPermission</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;Article_Update&quot;</span><span style="color: #ABB2BF">)]</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> AllowedToUpdate { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),Ns=new E({props:{lang:"csharp",ext:"cs",linesCount:2,code:`<pre><code><span class="line"><span style="color: #ABB2BF">[</span><span style="color: #E5C07B">HasPermission</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;Article_Update&quot;</span><span style="color: #ABB2BF">, IsRequired </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">)]</span></span>
<span class="line"></span></code></pre>`}}),as=new S({props:{class:"header-anchor",href:"#route-parameters","aria-hidden":"true",$$slots:{default:[$r]},$$scope:{ctx:D}}}),Gs=new E({props:{title:"MyRequest.cs",lang:"csharp",ext:"cs",linesCount:10,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyRequest</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> MyString { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> MyBool { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> MyInt { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">long</span><span style="color: #ABB2BF"> MyLong { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">double</span><span style="color: #ABB2BF"> MyDouble { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">decimal</span><span style="color: #ABB2BF"> MyDecimal { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),Us=new E({props:{title:"Endpoint.cs",lang:"csharp",ext:"cs",linesCount:9,code:`<pre><code><span class="line"></span>
<span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyEndpoint</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">Endpoint</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">MyRequest</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Get</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/api/{MyString}/{MyBool}/{MyInt}/{MyLong}/{MyDouble}/{MyDecimal}&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),Js=new E({props:{lang:"text",ext:"text",linesCount:7,code:`<pre><code><span class="line"><span style="color: undefined">MyString  - &quot;hello world&quot;</span></span>
<span class="line"><span style="color: undefined">MyBool    - true</span></span>
<span class="line"><span style="color: undefined">MyInt     - 123</span></span>
<span class="line"><span style="color: undefined">MyLong    - 12345678</span></span>
<span class="line"><span style="color: undefined">MyDouble  - 123.45</span></span>
<span class="line"><span style="color: undefined">MyDecimal - 123.4567</span></span>
<span class="line"><span style="color: undefined"></span></span></code></pre>`}}),os=new S({props:{class:"header-anchor",href:"#query-parameters","aria-hidden":"true",$$slots:{default:[Cr]},$$scope:{ctx:D}}}),Ms=new E({props:{lang:"text",ext:"text",linesCount:2,code:`<pre><code><span class="line"><span style="color: undefined">/api/hello-world/?Message=hello+from+query+string</span></span>
<span class="line"><span style="color: undefined"></span></span></code></pre>`}}),ps=new S({props:{class:"header-anchor",href:"#complex-model-binding","aria-hidden":"true",$$slots:{default:[Dr]},$$scope:{ctx:D}}}),Hs=new E({props:{title:"request.json",lang:"json",ext:"json",linesCount:9,code:`<pre><code><span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">&quot;UserID&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">111</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">&quot;Address&quot;</span><span style="color: #ABB2BF">: {</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E06C75">&quot;Street&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&quot;123 road&quot;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E06C75">&quot;City&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&quot;new york&quot;</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E06C75">&quot;Country&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&quot;usa&quot;</span></span>
<span class="line"><span style="color: #ABB2BF">	}</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),Ls=new E({props:{title:"UpdateAddressRequest.cs",lang:"csharp",ext:"cs",linesCount:13,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">UpdateAddressRequest</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> UserID { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Address</span><span style="color: #ABB2BF"> UserAddress { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Address</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> Street { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> City { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> Country { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),zs=new E({props:{title:"MyEndpoint.cs",lang:"csharp",ext:"cs",linesCount:5,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyEndpoint</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">Endpoint</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">List</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">Address</span><span style="color: #ABB2BF">&gt;&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">  ...</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),cs=new S({props:{class:"header-anchor",href:"#mismatched-property-names","aria-hidden":"true",$$slots:{default:[hr]},$$scope:{ctx:D}}}),js=new E({props:{lang:"csharp",ext:"cs",linesCount:3,code:`<pre><code><span class="line"><span style="color: #ABB2BF">[</span><span style="color: #E5C07B">JsonPropertyName</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;address&quot;</span><span style="color: #ABB2BF">)]</span></span>
<span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">Address</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">UserAddress</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75">get</span><span style="color: #ABB2BF">; </span><span style="color: #E06C75">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"></span></code></pre>`}}),Ys=new E({props:{lang:"csharp",ext:"cs",linesCount:3,code:`<pre><code><span class="line"><span style="color: #ABB2BF">[</span><span style="color: #E5C07B">BindFrom</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;customerId&quot;</span><span style="color: #ABB2BF">)]</span></span>
<span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">string</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">CustomerID</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75">get</span><span style="color: #ABB2BF">; </span><span style="color: #E06C75">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"></span></code></pre>`}}),Ws=new E({props:{lang:"csharp",ext:"cs",linesCount:6,code:`<pre><code><span class="line"><span style="color: #ABB2BF">[</span><span style="color: #E5C07B">FromHeader</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;tenant-id&quot;</span><span style="color: #ABB2BF">)]</span></span>
<span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">string</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">TenantID</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75">get</span><span style="color: #ABB2BF">; </span><span style="color: #E06C75">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">[</span><span style="color: #E5C07B">FromClaim</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;user-id&quot;</span><span style="color: #ABB2BF">)]</span></span>
<span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">string</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">UserID</span><span style="color: #ABB2BF"> { </span><span style="color: #E06C75">get</span><span style="color: #ABB2BF">; </span><span style="color: #E06C75">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"></span></code></pre>`}}),is=new S({props:{class:"header-anchor",href:"#supported-dto-property-types","aria-hidden":"true",$$slots:{default:[Er]},$$scope:{ctx:D}}}),us=new S({props:{href:"https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-converters-how-to?pivots=dotnet-6-0",target:"_blank",rel:"noopener noreferrer",$$slots:{default:[br]},$$scope:{ctx:D}}}),Vs=new E({props:{title:"Program.cs",lang:"csharp",ext:"cs",linesCount:8,code:`<pre><code><span class="line"><span style="color: #E5C07B">app</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">UseFastEndpoints</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">c</span><span style="color: #ABB2BF"> =&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">c</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">SerializerOptions</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">options</span><span style="color: #ABB2BF"> =&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">options</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">SerializerOptions</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Converters</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">Add</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">CustomConverter</span><span style="color: #ABB2BF">());</span></span>
<span class="line"><span style="color: #ABB2BF">    };</span></span>
<span class="line"><span style="color: #ABB2BF">});</span></span>
<span class="line"></span></code></pre>`}}),Xs=new E({props:{title:"Point.cs",lang:"csharp",ext:"cs",linesCount:32,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Point</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">double</span><span style="color: #ABB2BF"> X { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">double</span><span style="color: #ABB2BF"> Y { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">static</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">bool</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">TryParse</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">string</span><span style="color: #ABB2BF">? </span><span style="color: #E5C07B">input</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">out</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Point</span><span style="color: #ABB2BF">? </span><span style="color: #E5C07B">output</span><span style="color: #ABB2BF">) </span><span style="color: #7F848E; font-style: italic">//adhere to this signature</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E06C75">output</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E5C07B">string</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">IsNullOrEmpty</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">input</span><span style="color: #ABB2BF">))</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">parts</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">input</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">Split</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&#39;,&#39;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #56B6C2">!</span><span style="color: #E5C07B">double</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">TryParse</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">parts</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">], </span><span style="color: #C678DD">out</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">x</span><span style="color: #ABB2BF">) </span><span style="color: #56B6C2">||</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #56B6C2">!</span><span style="color: #E5C07B">double</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">TryParse</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">parts</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">], </span><span style="color: #C678DD">out</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">y</span><span style="color: #ABB2BF">))</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E06C75">output</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Point</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E06C75">X</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">x</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E06C75">Y</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">y</span></span>
<span class="line"><span style="color: #ABB2BF">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),Ks=new E({props:{title:"Request URL",lang:"text",ext:"text",linesCount:2,code:`<pre><code><span class="line"><span style="color: undefined">/my-endpoint?items=[{id=&quot;1&quot;},{id=&quot;2&quot;}]&amp;codes=[1,2,3,4,5]</span></span>
<span class="line"><span style="color: undefined"></span></span></code></pre>`}}),Zs=new E({props:{title:"MyRequest.cs",lang:"csharp",ext:"cs",linesCount:6,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyRequest</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">IEnumerable</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">Item</span><span style="color: #ABB2BF">&gt; Items { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">[] Codes { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),Fs=new S({props:{class:"header-anchor",href:"#route-query-binding-when-there-is-no-request-dto","aria-hidden":"true",$$slots:{default:[vr]},$$scope:{ctx:D}}}),se=new E({props:{title:"GetArticle.cs",lang:"csharp",ext:"cs",linesCount:18,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">GetArticle</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">EndpointWithoutRequest</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Get</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/article/{ArticleID}&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">AllowAnonymous</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #7F848E; font-style: italic">//http://localhost:5000/article/123</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">routeParam</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Route</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">&gt;(</span><span style="color: #98C379">&quot;ArticleID&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #7F848E; font-style: italic">//http://localhost:5000/article/123?OtherID=8635ffb2-6589-4629-85bc-29f2cce5a12d</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">Guid</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">queryParam</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Query</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">Guid</span><span style="color: #ABB2BF">&gt;(</span><span style="color: #98C379">&quot;OtherID&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),As=new dr({props:{type:"info",$$slots:{default:[_r]},$$scope:{ctx:D}}}),ee=new E({props:{lang:"csharp",ext:"cs",linesCount:3,code:`<pre><code><span class="line"><span style="color: #61AFEF">Route</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">Point</span><span style="color: #ABB2BF">&gt;(</span><span style="color: #98C379">&quot;ArticleID&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">isRequired</span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #61AFEF">Query</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">Guid</span><span style="color: #ABB2BF">&gt;(</span><span style="color: #98C379">&quot;OtherID&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">isRequired</span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span></code></pre>`}}),$s=new S({props:{class:"header-anchor",href:"#binding-to-raw-request-content","aria-hidden":"true",$$slots:{default:[gr]},$$scope:{ctx:D}}}),ne=new E({props:{title:"Request.cs",lang:"csharp",ext:"cs",linesCount:5,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Request</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">IPlainTextRequest</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> Content { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),hs=new S({props:{class:"header-anchor",href:"#json-serialization-casing","aria-hidden":"true",$$slots:{default:[qr]},$$scope:{ctx:D}}}),bs=new S({props:{href:"https://fast-endpoints.com/wiki/Configuration-Settings.html#specify-json-serializer-options",target:"_blank",rel:"noopener noreferrer",$$slots:{default:[wr]},$$scope:{ctx:D}}}),vs=new S({props:{class:"header-anchor",href:"#json-source-generator-support","aria-hidden":"true",$$slots:{default:[Tr]},$$scope:{ctx:D}}}),ae=new E({props:{title:"UpdateAddressCtx.cs",lang:"csharp",ext:"cs",linesCount:4,code:`<pre><code><span class="line"><span style="color: #ABB2BF">[</span><span style="color: #E5C07B">JsonSerializable</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">typeof</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">RequestModel</span><span style="color: #ABB2BF">))]</span></span>
<span class="line"><span style="color: #ABB2BF">[</span><span style="color: #E5C07B">JsonSerializable</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">typeof</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">ResponseModel</span><span style="color: #ABB2BF">))]</span></span>
<span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">partial</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">UpdateAddressCtx</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">JsonSerializerContext</span><span style="color: #ABB2BF"> { }</span></span>
<span class="line"></span></code></pre>`}}),oe=new E({props:{title:"UpdateAddress.cs",lang:"csharp",ext:"cs",linesCount:9,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">UpdateAddress</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">Endpoint</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">RequestModel</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">ResponseModel</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Post</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;user/address&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">SerializerContext</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">UpdateAddressCtx</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Default</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),{c(){i=p("h1"),C=a(c),x=y(),q=p("h2"),f(R.$$.fragment),gs=a(" Request DTO Binding"),N=y(),w=p("p"),qs=a("The endpoint handlers are supplied with fully populated request dtos. the dto property values are automatically bound from the incoming request, from the following sources in the exact order:"),I=y(),v=p("ol"),G=p("li"),T=a("JSON Body"),P=y(),V=p("li"),ce=a("Form Data"),X=y(),K=p("li"),ca=a("Route Parameters"),ia=y(),Me=p("li"),ya=a("Query Parameters"),ua=y(),ws=p("li"),fa=a("User Claims (if property has "),He=p("strong"),ma=a("[FromClaim]"),da=a(" attribute)"),Fa=y(),Ts=p("li"),Aa=a("HTTP Headers (if property has "),Le=p("strong"),$a=a("[FromHeader]"),Ca=a(" attribute)"),Da=y(),Ps=p("li"),ha=a("Permissions (if boolean property has "),ze=p("strong"),Ea=a("[HasPermission]"),ba=a(" attribute)"),Mn=y(),ie=p("p"),va=a("Consider the following request DTO and HTTP request:"),Hn=y(),f(Ss.$$.fragment),ye=p("ul"),je=p("li"),_a=a("HTTP Request"),Ln=y(),f(Rs.$$.fragment),ue=p("p"),ga=a("When the handler receives the request DTO, the value of UserID will be 54321 because route parameters have higher priority than JSON body."),zn=y(),Z=p("p"),qa=a("Likewise, if you decorate the UserID property with "),Qe=p("strong"),wa=a("[FromClaim]"),Ta=a(" attribute like so:"),jn=y(),f(xs.$$.fragment),fe=p("p"),Pa=a("The value of UserID will be whatever claim value the user has for the claim type UserID in their claims."),Qn=y(),me=p("p"),Sa=a("By default if the user does not have a claim type called UserID, then a validation error will be sent automatically to the client."),Yn=y(),de=p("p"),Ra=a("You can make the claim optional by using the following overload of the attribute:"),Wn=y(),f(Is.$$.fragment),Fe=p("p"),xa=a("Doing so will allow the endpoint handler to execute even if the current user doesn't have the specified claim and model binding will take the value from the highest priority source of the other binding sources mentioned above (if a matching field/route param is present)."),Vn=y(),ss=p("p"),Ia=a("An example can be seen "),f(es.$$.fragment),Oa=a("."),Xn=y(),Ae=p("p"),ka=a("It is also possible to model bind automatically from http headers like so:"),Kn=y(),f(Os.$$.fragment),U=p("p"),Ye=p("strong"),Na=a("FromHeader"),Ga=a(" attribute will also by default send an error response if a http header (with the same name as the property being bound to) is not present in the incoming request. you can make the header optional and turn off the default behavior by doing "),We=p("strong"),Ua=a("[FromHeader(IsRequired = false)]"),Ja=a(" just like with the FromClaim attribute. Both attributes have the same overloads and behaves similarly."),Zn=y(),ns=p("p"),Ma=a("The "),Ve=p("strong"),Ha=a("HasPermission"),La=a(" attribute can be used on boolean properties to check if the current user principal has a particular permission like so:"),sl=y(),f(ks.$$.fragment),ls=p("p"),za=a("The property value will be set to "),Xe=p("strong"),ja=a("true"),Qa=a(" if the current principal has the Article_Update permission. as with the above attributes, an automatic validation error will be sent in case the principal does not have the specified permission."),el=y(),$e=p("p"),Ya=a("You can disable the automatic validation error by doing the following:"),nl=y(),f(Ns.$$.fragment),J=p("h2"),f(as.$$.fragment),Wa=a(" Route Parameters"),ll=y(),Ce=p("p"),Va=a("Route parameters can be bound to properties on the dto using route templates like you'd typically do."),al=y(),f(Gs.$$.fragment),f(Us.$$.fragment),ts=p("p"),Xa=a("If a "),Ke=p("strong"),Ka=a("GET"),Za=a(" request is made to the url:"),tl=y(),De=p("p"),Ze=p("strong"),st=a("/api/hello world/true/123/12345678/123.45/123.4567"),ol=y(),he=p("p"),et=a("The request dto would have the following property values:"),pl=y(),f(Js.$$.fragment),M=p("h2"),f(os.$$.fragment),nt=a(" Query Parameters"),rl=y(),Ee=p("p"),lt=a("In order to bind from query string params, simply use a url that has the same param names as your request dto such as:"),Bl=y(),f(Ms.$$.fragment),be=p("p"),at=a("If your request DTO has a property called Message it would then have hello from query string as it's value."),cl=y(),H=p("h2"),f(ps.$$.fragment),tt=a(" Complex Model Binding"),il=y(),rs=p("p"),ot=a("Complex models are bound automatically from the incoming http request body that has a content-type header value of "),sn=p("strong"),pt=a("application/json"),rt=a(" if the body has valid json such as the following:"),yl=y(),f(Hs.$$.fragment),ve=p("p"),Bt=a("Which would be bound to a complex type such as this:"),ul=y(),f(Ls.$$.fragment),Bs=p("p"),ct=a("JSON arrays in the request body can be bound to models by specifying the request DTO type of the endpoint as "),en=p("strong"),it=a("List<T>"),yt=a(" like so:"),fl=y(),f(zs.$$.fragment),L=p("h2"),f(cs.$$.fragment),ut=a(" Mismatched Property Names"),ml=y(),_e=p("p"),ft=a("You can bind to DTO properties when the incoming parameter name doesn't match with the name of the property being bound to, depending on the type of the parameter source like so:"),dl=y(),ge=p("p"),nn=p("strong"),mt=a("JSON Body"),Fl=y(),f(js.$$.fragment),Qs=p("p"),ln=p("strong"),dt=a("Form Fields, Route Params & Query Params"),Ft=a(":"),Al=y(),f(Ys.$$.fragment),qe=p("p"),At=a("Headers & Claims:"),$l=y(),f(Ws.$$.fragment),z=p("h2"),f(is.$$.fragment),$t=a(" Supported DTO Property Types"),Cl=y(),we=p("p"),an=p("strong"),Ct=a("From JSON Body:"),Dl=y(),ys=p("p"),Dt=a("Any complex type can be bound as long as the System.Text.Json serializer can handle it. if it's not supported out of the box, please see the "),f(us.$$.fragment),ht=a(" on how to implement custom converters for your types."),hl=y(),Te=p("p"),Et=a("You can register your custom converters in startup like this:"),El=y(),f(Vs.$$.fragment),Pe=p("p"),tn=p("strong"),bt=a("From Form fields/route/query/claims/headers:"),bl=y(),fs=p("p"),vt=a("Simple strings (scalar values) can be bound automatically to any of the primitive/CLR non-collection types such as the following that has a static "),on=p("strong"),_t=a("TryParse()"),gt=a(" method:"),vl=y(),h=p("ul"),pn=p("li"),qt=a("bool"),wt=y(),rn=p("li"),Tt=a("double"),Pt=y(),Bn=p("li"),St=a("decimal"),Rt=y(),cn=p("li"),xt=a("DateTime"),It=y(),yn=p("li"),Ot=a("Enum"),kt=y(),un=p("li"),Nt=a("Guid"),Gt=y(),fn=p("li"),Ut=a("int"),Jt=y(),mn=p("li"),Mt=a("long"),Ht=y(),dn=p("li"),Lt=a("string"),zt=y(),Fn=p("li"),jt=a("TimeSpan"),Qt=y(),An=p("li"),Yt=a("Uri"),Wt=y(),$n=p("li"),Vt=a("Version"),_l=y(),ms=p("p"),Xt=a(`In order to support binding your custom types from route/query/claims/header/form fields,
simply add a static `),Cn=p("strong"),Kt=a("TryParse()"),Zt=a(" method to your type like the example below:"),gl=y(),f(Xs.$$.fragment),O=p("p"),so=a("JSON array strings can be bound to collection type properties such as "),Dn=p("strong"),eo=a("IEnumerable<T>"),no=a(" and "),hn=p("strong"),lo=a("T[]"),ao=a(" as long as the incoming string is valid JSON."),ql=y(),ds=p("p"),to=a("The incoming json string is deserialized using "),En=p("strong"),oo=a("System.Text.Json"),po=a(" serializer."),wl=y(),Se=p("p"),ro=a("Consider the following example:"),Tl=y(),f(Ks.$$.fragment),f(Zs.$$.fragment),Re=p("p"),Bo=a("The Items property will have 2 objects as it's values and the Codes will have 5 integers as it's values when the handler receives the DTO."),Pl=y(),xe=p("p"),co=a("To reiterate, if you want to automatically bind incoming values to collection type properties from query params, form fields, header values or claim values, those values must be valid JSON arrays."),Sl=y(),Ie=p("p"),io=a("If the input is invalid JSON, an exception will be thrown by STJ."),Rl=y(),j=p("h2"),f(Fs.$$.fragment),yo=a(" Route/Query Binding When There Is No Request DTO"),xl=y(),k=p("p"),uo=a("If your endpoint doesn't have/need a request DTO, you can easily read route & query parameters using the "),bn=p("strong"),fo=a("Route<T>()"),mo=a(" and "),vn=p("strong"),Fo=a("Query<T>()"),Ao=a(" methods."),Il=y(),f(se.$$.fragment),f(As.$$.fragment),Ol=y(),f(ee.$$.fragment),Q=p("h2"),f($s.$$.fragment),$o=a(" Binding To Raw Request Content"),kl=y(),Cs=p("p"),Co=a("If you need to access the raw request content as a string, you can achieve that by implementing the interface "),_n=p("strong"),Do=a("IPlainTextRequest"),ho=a(" on your DTO like so:"),Nl=y(),f(ne.$$.fragment),Ds=p("p"),Eo=a("When your dto implements "),gn=p("strong"),bo=a("IPlainTextRequest"),vo=a(", JSON model binding won't occur."),Gl=y(),Oe=p("p"),_o=a("Instead, the Content property is populated with the content of the request body."),Ul=y(),ke=p("p"),go=a("Other properties can also be added to your dto in case you need to access some other values like route/query/form field/header/claim values."),Jl=y(),Y=p("h2"),f(hs.$$.fragment),qo=a(" JSON Serialization Casing"),Ml=y(),Ne=p("p"),wo=a("By default the serializer uses camel casing for serializing/deserializing."),Hl=y(),Es=p("p"),To=a("You can change the casing as shown in the "),f(bs.$$.fragment),Po=a(" section."),Ll=y(),W=p("h2"),f(vs.$$.fragment),So=a(" JSON Source Generator Support"),zl=y(),_s=p("p"),Ro=a("The "),qn=p("strong"),xo=a("System.Text.Json"),Io=a(" source generator support can be easily enabled with a simple 2 step process:"),jl=y(),le=p("p"),wn=p("strong"),Oo=a("Step #1"),ko=a(" : Create a Serializer Context"),Ql=y(),f(ae.$$.fragment),te=p("p"),Tn=p("strong"),No=a("Step #2"),Go=a(" : Specify The Serializer Context For The Endpoint"),Yl=y(),f(oe.$$.fragment),this.h()},l(s){i=r(s,"H1",{});var l=B(i);C=t(l,c),l.forEach(e),x=u(s),q=r(s,"H2",{id:!0,tabindex:!0});var Ge=B(q);m(R.$$.fragment,Ge),gs=t(Ge," Request DTO Binding"),Ge.forEach(e),N=u(s),w=r(s,"P",{});var Sn=B(w);qs=t(Sn,"The endpoint handlers are supplied with fully populated request dtos. the dto property values are automatically bound from the incoming request, from the following sources in the exact order:"),Sn.forEach(e),I=u(s),v=r(s,"OL",{});var g=B(v);G=r(g,"LI",{});var Rn=B(G);T=t(Rn,"JSON Body"),Rn.forEach(e),P=u(g),V=r(g,"LI",{});var xn=B(V);ce=t(xn,"Form Data"),xn.forEach(e),X=u(g),K=r(g,"LI",{});var In=B(K);ca=t(In,"Route Parameters"),In.forEach(e),ia=u(g),Me=r(g,"LI",{});var On=B(Me);ya=t(On,"Query Parameters"),On.forEach(e),ua=u(g),ws=r(g,"LI",{});var pe=B(ws);fa=t(pe,"User Claims (if property has "),He=r(pe,"STRONG",{});var kn=B(He);ma=t(kn,"[FromClaim]"),kn.forEach(e),da=t(pe," attribute)"),pe.forEach(e),Fa=u(g),Ts=r(g,"LI",{});var re=B(Ts);Aa=t(re,"HTTP Headers (if property has "),Le=r(re,"STRONG",{});var Nn=B(Le);$a=t(Nn,"[FromHeader]"),Nn.forEach(e),Ca=t(re," attribute)"),re.forEach(e),Da=u(g),Ps=r(g,"LI",{});var Be=B(Ps);ha=t(Be,"Permissions (if boolean property has "),ze=r(Be,"STRONG",{});var Gn=B(ze);Ea=t(Gn,"[HasPermission]"),Gn.forEach(e),ba=t(Be," attribute)"),Be.forEach(e),g.forEach(e),Mn=u(s),ie=r(s,"P",{});var Un=B(ie);va=t(Un,"Consider the following request DTO and HTTP request:"),Un.forEach(e),Hn=u(s),m(Ss.$$.fragment,s),ye=r(s,"UL",{});var Ko=B(ye);je=r(Ko,"LI",{});var Zo=B(je);_a=t(Zo,"HTTP Request"),Zo.forEach(e),Ko.forEach(e),Ln=u(s),m(Rs.$$.fragment,s),ue=r(s,"P",{});var sp=B(ue);ga=t(sp,"When the handler receives the request DTO, the value of UserID will be 54321 because route parameters have higher priority than JSON body."),sp.forEach(e),zn=u(s),Z=r(s,"P",{});var Wl=B(Z);qa=t(Wl,"Likewise, if you decorate the UserID property with "),Qe=r(Wl,"STRONG",{});var ep=B(Qe);wa=t(ep,"[FromClaim]"),ep.forEach(e),Ta=t(Wl," attribute like so:"),Wl.forEach(e),jn=u(s),m(xs.$$.fragment,s),fe=r(s,"P",{});var np=B(fe);Pa=t(np,"The value of UserID will be whatever claim value the user has for the claim type UserID in their claims."),np.forEach(e),Qn=u(s),me=r(s,"P",{});var lp=B(me);Sa=t(lp,"By default if the user does not have a claim type called UserID, then a validation error will be sent automatically to the client."),lp.forEach(e),Yn=u(s),de=r(s,"P",{});var ap=B(de);Ra=t(ap,"You can make the claim optional by using the following overload of the attribute:"),ap.forEach(e),Wn=u(s),m(Is.$$.fragment,s),Fe=r(s,"P",{});var tp=B(Fe);xa=t(tp,"Doing so will allow the endpoint handler to execute even if the current user doesn't have the specified claim and model binding will take the value from the highest priority source of the other binding sources mentioned above (if a matching field/route param is present)."),tp.forEach(e),Vn=u(s),ss=r(s,"P",{});var Vl=B(ss);Ia=t(Vl,"An example can be seen "),m(es.$$.fragment,Vl),Oa=t(Vl,"."),Vl.forEach(e),Xn=u(s),Ae=r(s,"P",{});var op=B(Ae);ka=t(op,"It is also possible to model bind automatically from http headers like so:"),op.forEach(e),Kn=u(s),m(Os.$$.fragment,s),U=r(s,"P",{});var Jn=B(U);Ye=r(Jn,"STRONG",{});var pp=B(Ye);Na=t(pp,"FromHeader"),pp.forEach(e),Ga=t(Jn," attribute will also by default send an error response if a http header (with the same name as the property being bound to) is not present in the incoming request. you can make the header optional and turn off the default behavior by doing "),We=r(Jn,"STRONG",{});var rp=B(We);Ua=t(rp,"[FromHeader(IsRequired = false)]"),rp.forEach(e),Ja=t(Jn," just like with the FromClaim attribute. Both attributes have the same overloads and behaves similarly."),Jn.forEach(e),Zn=u(s),ns=r(s,"P",{});var Xl=B(ns);Ma=t(Xl,"The "),Ve=r(Xl,"STRONG",{});var Bp=B(Ve);Ha=t(Bp,"HasPermission"),Bp.forEach(e),La=t(Xl," attribute can be used on boolean properties to check if the current user principal has a particular permission like so:"),Xl.forEach(e),sl=u(s),m(ks.$$.fragment,s),ls=r(s,"P",{});var Kl=B(ls);za=t(Kl,"The property value will be set to "),Xe=r(Kl,"STRONG",{});var cp=B(Xe);ja=t(cp,"true"),cp.forEach(e),Qa=t(Kl," if the current principal has the Article_Update permission. as with the above attributes, an automatic validation error will be sent in case the principal does not have the specified permission."),Kl.forEach(e),el=u(s),$e=r(s,"P",{});var ip=B($e);Ya=t(ip,"You can disable the automatic validation error by doing the following:"),ip.forEach(e),nl=u(s),m(Ns.$$.fragment,s),J=r(s,"H2",{id:!0,tabindex:!0});var Uo=B(J);m(as.$$.fragment,Uo),Wa=t(Uo," Route Parameters"),Uo.forEach(e),ll=u(s),Ce=r(s,"P",{});var yp=B(Ce);Va=t(yp,"Route parameters can be bound to properties on the dto using route templates like you'd typically do."),yp.forEach(e),al=u(s),m(Gs.$$.fragment,s),m(Us.$$.fragment,s),ts=r(s,"P",{});var Zl=B(ts);Xa=t(Zl,"If a "),Ke=r(Zl,"STRONG",{});var up=B(Ke);Ka=t(up,"GET"),up.forEach(e),Za=t(Zl," request is made to the url:"),Zl.forEach(e),tl=u(s),De=r(s,"P",{});var fp=B(De);Ze=r(fp,"STRONG",{});var mp=B(Ze);st=t(mp,"/api/hello world/true/123/12345678/123.45/123.4567"),mp.forEach(e),fp.forEach(e),ol=u(s),he=r(s,"P",{});var dp=B(he);et=t(dp,"The request dto would have the following property values:"),dp.forEach(e),pl=u(s),m(Js.$$.fragment,s),M=r(s,"H2",{id:!0,tabindex:!0});var Jo=B(M);m(os.$$.fragment,Jo),nt=t(Jo," Query Parameters"),Jo.forEach(e),rl=u(s),Ee=r(s,"P",{});var Fp=B(Ee);lt=t(Fp,"In order to bind from query string params, simply use a url that has the same param names as your request dto such as:"),Fp.forEach(e),Bl=u(s),m(Ms.$$.fragment,s),be=r(s,"P",{});var Ap=B(be);at=t(Ap,"If your request DTO has a property called Message it would then have hello from query string as it's value."),Ap.forEach(e),cl=u(s),H=r(s,"H2",{id:!0,tabindex:!0});var Mo=B(H);m(ps.$$.fragment,Mo),tt=t(Mo," Complex Model Binding"),Mo.forEach(e),il=u(s),rs=r(s,"P",{});var sa=B(rs);ot=t(sa,"Complex models are bound automatically from the incoming http request body that has a content-type header value of "),sn=r(sa,"STRONG",{});var $p=B(sn);pt=t($p,"application/json"),$p.forEach(e),rt=t(sa," if the body has valid json such as the following:"),sa.forEach(e),yl=u(s),m(Hs.$$.fragment,s),ve=r(s,"P",{});var Cp=B(ve);Bt=t(Cp,"Which would be bound to a complex type such as this:"),Cp.forEach(e),ul=u(s),m(Ls.$$.fragment,s),Bs=r(s,"P",{});var ea=B(Bs);ct=t(ea,"JSON arrays in the request body can be bound to models by specifying the request DTO type of the endpoint as "),en=r(ea,"STRONG",{});var Dp=B(en);it=t(Dp,"List<T>"),Dp.forEach(e),yt=t(ea," like so:"),ea.forEach(e),fl=u(s),m(zs.$$.fragment,s),L=r(s,"H2",{id:!0,tabindex:!0});var Ho=B(L);m(cs.$$.fragment,Ho),ut=t(Ho," Mismatched Property Names"),Ho.forEach(e),ml=u(s),_e=r(s,"P",{});var hp=B(_e);ft=t(hp,"You can bind to DTO properties when the incoming parameter name doesn't match with the name of the property being bound to, depending on the type of the parameter source like so:"),hp.forEach(e),dl=u(s),ge=r(s,"P",{});var Ep=B(ge);nn=r(Ep,"STRONG",{});var bp=B(nn);mt=t(bp,"JSON Body"),bp.forEach(e),Ep.forEach(e),Fl=u(s),m(js.$$.fragment,s),Qs=r(s,"P",{});var Lo=B(Qs);ln=r(Lo,"STRONG",{});var vp=B(ln);dt=t(vp,"Form Fields, Route Params & Query Params"),vp.forEach(e),Ft=t(Lo,":"),Lo.forEach(e),Al=u(s),m(Ys.$$.fragment,s),qe=r(s,"P",{});var _p=B(qe);At=t(_p,"Headers & Claims:"),_p.forEach(e),$l=u(s),m(Ws.$$.fragment,s),z=r(s,"H2",{id:!0,tabindex:!0});var zo=B(z);m(is.$$.fragment,zo),$t=t(zo," Supported DTO Property Types"),zo.forEach(e),Cl=u(s),we=r(s,"P",{});var gp=B(we);an=r(gp,"STRONG",{});var qp=B(an);Ct=t(qp,"From JSON Body:"),qp.forEach(e),gp.forEach(e),Dl=u(s),ys=r(s,"P",{});var na=B(ys);Dt=t(na,"Any complex type can be bound as long as the System.Text.Json serializer can handle it. if it's not supported out of the box, please see the "),m(us.$$.fragment,na),ht=t(na," on how to implement custom converters for your types."),na.forEach(e),hl=u(s),Te=r(s,"P",{});var wp=B(Te);Et=t(wp,"You can register your custom converters in startup like this:"),wp.forEach(e),El=u(s),m(Vs.$$.fragment,s),Pe=r(s,"P",{});var Tp=B(Pe);tn=r(Tp,"STRONG",{});var Pp=B(tn);bt=t(Pp,"From Form fields/route/query/claims/headers:"),Pp.forEach(e),Tp.forEach(e),bl=u(s),fs=r(s,"P",{});var la=B(fs);vt=t(la,"Simple strings (scalar values) can be bound automatically to any of the primitive/CLR non-collection types such as the following that has a static "),on=r(la,"STRONG",{});var Sp=B(on);_t=t(Sp,"TryParse()"),Sp.forEach(e),gt=t(la," method:"),la.forEach(e),vl=u(s),h=r(s,"UL",{});var b=B(h);pn=r(b,"LI",{});var Rp=B(pn);qt=t(Rp,"bool"),Rp.forEach(e),wt=u(b),rn=r(b,"LI",{});var xp=B(rn);Tt=t(xp,"double"),xp.forEach(e),Pt=u(b),Bn=r(b,"LI",{});var Ip=B(Bn);St=t(Ip,"decimal"),Ip.forEach(e),Rt=u(b),cn=r(b,"LI",{});var Op=B(cn);xt=t(Op,"DateTime"),Op.forEach(e),It=u(b),yn=r(b,"LI",{});var kp=B(yn);Ot=t(kp,"Enum"),kp.forEach(e),kt=u(b),un=r(b,"LI",{});var Np=B(un);Nt=t(Np,"Guid"),Np.forEach(e),Gt=u(b),fn=r(b,"LI",{});var Gp=B(fn);Ut=t(Gp,"int"),Gp.forEach(e),Jt=u(b),mn=r(b,"LI",{});var Up=B(mn);Mt=t(Up,"long"),Up.forEach(e),Ht=u(b),dn=r(b,"LI",{});var Jp=B(dn);Lt=t(Jp,"string"),Jp.forEach(e),zt=u(b),Fn=r(b,"LI",{});var Mp=B(Fn);jt=t(Mp,"TimeSpan"),Mp.forEach(e),Qt=u(b),An=r(b,"LI",{});var Hp=B(An);Yt=t(Hp,"Uri"),Hp.forEach(e),Wt=u(b),$n=r(b,"LI",{});var Lp=B($n);Vt=t(Lp,"Version"),Lp.forEach(e),b.forEach(e),_l=u(s),ms=r(s,"P",{});var aa=B(ms);Xt=t(aa,`In order to support binding your custom types from route/query/claims/header/form fields,
simply add a static `),Cn=r(aa,"STRONG",{});var zp=B(Cn);Kt=t(zp,"TryParse()"),zp.forEach(e),Zt=t(aa," method to your type like the example below:"),aa.forEach(e),gl=u(s),m(Xs.$$.fragment,s),O=r(s,"P",{});var Ue=B(O);so=t(Ue,"JSON array strings can be bound to collection type properties such as "),Dn=r(Ue,"STRONG",{});var jp=B(Dn);eo=t(jp,"IEnumerable<T>"),jp.forEach(e),no=t(Ue," and "),hn=r(Ue,"STRONG",{});var Qp=B(hn);lo=t(Qp,"T[]"),Qp.forEach(e),ao=t(Ue," as long as the incoming string is valid JSON."),Ue.forEach(e),ql=u(s),ds=r(s,"P",{});var ta=B(ds);to=t(ta,"The incoming json string is deserialized using "),En=r(ta,"STRONG",{});var Yp=B(En);oo=t(Yp,"System.Text.Json"),Yp.forEach(e),po=t(ta," serializer."),ta.forEach(e),wl=u(s),Se=r(s,"P",{});var Wp=B(Se);ro=t(Wp,"Consider the following example:"),Wp.forEach(e),Tl=u(s),m(Ks.$$.fragment,s),m(Zs.$$.fragment,s),Re=r(s,"P",{});var Vp=B(Re);Bo=t(Vp,"The Items property will have 2 objects as it's values and the Codes will have 5 integers as it's values when the handler receives the DTO."),Vp.forEach(e),Pl=u(s),xe=r(s,"P",{});var Xp=B(xe);co=t(Xp,"To reiterate, if you want to automatically bind incoming values to collection type properties from query params, form fields, header values or claim values, those values must be valid JSON arrays."),Xp.forEach(e),Sl=u(s),Ie=r(s,"P",{});var Kp=B(Ie);io=t(Kp,"If the input is invalid JSON, an exception will be thrown by STJ."),Kp.forEach(e),Rl=u(s),j=r(s,"H2",{id:!0,tabindex:!0});var jo=B(j);m(Fs.$$.fragment,jo),yo=t(jo," Route/Query Binding When There Is No Request DTO"),jo.forEach(e),xl=u(s),k=r(s,"P",{});var Je=B(k);uo=t(Je,"If your endpoint doesn't have/need a request DTO, you can easily read route & query parameters using the "),bn=r(Je,"STRONG",{});var Zp=B(bn);fo=t(Zp,"Route<T>()"),Zp.forEach(e),mo=t(Je," and "),vn=r(Je,"STRONG",{});var sr=B(vn);Fo=t(sr,"Query<T>()"),sr.forEach(e),Ao=t(Je," methods."),Je.forEach(e),Il=u(s),m(se.$$.fragment,s),m(As.$$.fragment,s),Ol=u(s),m(ee.$$.fragment,s),Q=r(s,"H2",{id:!0,tabindex:!0});var Qo=B(Q);m($s.$$.fragment,Qo),$o=t(Qo," Binding To Raw Request Content"),Qo.forEach(e),kl=u(s),Cs=r(s,"P",{});var oa=B(Cs);Co=t(oa,"If you need to access the raw request content as a string, you can achieve that by implementing the interface "),_n=r(oa,"STRONG",{});var er=B(_n);Do=t(er,"IPlainTextRequest"),er.forEach(e),ho=t(oa," on your DTO like so:"),oa.forEach(e),Nl=u(s),m(ne.$$.fragment,s),Ds=r(s,"P",{});var pa=B(Ds);Eo=t(pa,"When your dto implements "),gn=r(pa,"STRONG",{});var nr=B(gn);bo=t(nr,"IPlainTextRequest"),nr.forEach(e),vo=t(pa,", JSON model binding won't occur."),pa.forEach(e),Gl=u(s),Oe=r(s,"P",{});var lr=B(Oe);_o=t(lr,"Instead, the Content property is populated with the content of the request body."),lr.forEach(e),Ul=u(s),ke=r(s,"P",{});var ar=B(ke);go=t(ar,"Other properties can also be added to your dto in case you need to access some other values like route/query/form field/header/claim values."),ar.forEach(e),Jl=u(s),Y=r(s,"H2",{id:!0,tabindex:!0});var Yo=B(Y);m(hs.$$.fragment,Yo),qo=t(Yo," JSON Serialization Casing"),Yo.forEach(e),Ml=u(s),Ne=r(s,"P",{});var tr=B(Ne);wo=t(tr,"By default the serializer uses camel casing for serializing/deserializing."),tr.forEach(e),Hl=u(s),Es=r(s,"P",{});var ra=B(Es);To=t(ra,"You can change the casing as shown in the "),m(bs.$$.fragment,ra),Po=t(ra," section."),ra.forEach(e),Ll=u(s),W=r(s,"H2",{id:!0,tabindex:!0});var Wo=B(W);m(vs.$$.fragment,Wo),So=t(Wo," JSON Source Generator Support"),Wo.forEach(e),zl=u(s),_s=r(s,"P",{});var Ba=B(_s);Ro=t(Ba,"The "),qn=r(Ba,"STRONG",{});var or=B(qn);xo=t(or,"System.Text.Json"),or.forEach(e),Io=t(Ba," source generator support can be easily enabled with a simple 2 step process:"),Ba.forEach(e),jl=u(s),le=r(s,"P",{});var Vo=B(le);wn=r(Vo,"STRONG",{});var pr=B(wn);Oo=t(pr,"Step #1"),pr.forEach(e),ko=t(Vo," : Create a Serializer Context"),Vo.forEach(e),Ql=u(s),m(ae.$$.fragment,s),te=r(s,"P",{});var Xo=B(te);Tn=r(Xo,"STRONG",{});var rr=B(Tn);No=t(rr,"Step #2"),rr.forEach(e),Go=t(Xo," : Specify The Serializer Context For The Endpoint"),Xo.forEach(e),Yl=u(s),m(oe.$$.fragment,s),this.h()},h(){_(q,"id","request-dto-binding"),_(q,"tabindex","-1"),_(J,"id","route-parameters"),_(J,"tabindex","-1"),_(M,"id","query-parameters"),_(M,"tabindex","-1"),_(H,"id","complex-model-binding"),_(H,"tabindex","-1"),_(L,"id","mismatched-property-names"),_(L,"tabindex","-1"),_(z,"id","supported-dto-property-types"),_(z,"tabindex","-1"),_(j,"id","route-query-binding-when-there-is-no-request-dto"),_(j,"tabindex","-1"),_(Q,"id","binding-to-raw-request-content"),_(Q,"tabindex","-1"),_(Y,"id","json-serialization-casing"),_(Y,"tabindex","-1"),_(W,"id","json-source-generator-support"),_(W,"tabindex","-1")},m(s,l){o(s,i,l),n(i,C),o(s,x,l),o(s,q,l),d(R,q,null),n(q,gs),o(s,N,l),o(s,w,l),n(w,qs),o(s,I,l),o(s,v,l),n(v,G),n(G,T),n(v,P),n(v,V),n(V,ce),n(v,X),n(v,K),n(K,ca),n(v,ia),n(v,Me),n(Me,ya),n(v,ua),n(v,ws),n(ws,fa),n(ws,He),n(He,ma),n(ws,da),n(v,Fa),n(v,Ts),n(Ts,Aa),n(Ts,Le),n(Le,$a),n(Ts,Ca),n(v,Da),n(v,Ps),n(Ps,ha),n(Ps,ze),n(ze,Ea),n(Ps,ba),o(s,Mn,l),o(s,ie,l),n(ie,va),o(s,Hn,l),d(Ss,s,l),o(s,ye,l),n(ye,je),n(je,_a),o(s,Ln,l),d(Rs,s,l),o(s,ue,l),n(ue,ga),o(s,zn,l),o(s,Z,l),n(Z,qa),n(Z,Qe),n(Qe,wa),n(Z,Ta),o(s,jn,l),d(xs,s,l),o(s,fe,l),n(fe,Pa),o(s,Qn,l),o(s,me,l),n(me,Sa),o(s,Yn,l),o(s,de,l),n(de,Ra),o(s,Wn,l),d(Is,s,l),o(s,Fe,l),n(Fe,xa),o(s,Vn,l),o(s,ss,l),n(ss,Ia),d(es,ss,null),n(ss,Oa),o(s,Xn,l),o(s,Ae,l),n(Ae,ka),o(s,Kn,l),d(Os,s,l),o(s,U,l),n(U,Ye),n(Ye,Na),n(U,Ga),n(U,We),n(We,Ua),n(U,Ja),o(s,Zn,l),o(s,ns,l),n(ns,Ma),n(ns,Ve),n(Ve,Ha),n(ns,La),o(s,sl,l),d(ks,s,l),o(s,ls,l),n(ls,za),n(ls,Xe),n(Xe,ja),n(ls,Qa),o(s,el,l),o(s,$e,l),n($e,Ya),o(s,nl,l),d(Ns,s,l),o(s,J,l),d(as,J,null),n(J,Wa),o(s,ll,l),o(s,Ce,l),n(Ce,Va),o(s,al,l),d(Gs,s,l),d(Us,s,l),o(s,ts,l),n(ts,Xa),n(ts,Ke),n(Ke,Ka),n(ts,Za),o(s,tl,l),o(s,De,l),n(De,Ze),n(Ze,st),o(s,ol,l),o(s,he,l),n(he,et),o(s,pl,l),d(Js,s,l),o(s,M,l),d(os,M,null),n(M,nt),o(s,rl,l),o(s,Ee,l),n(Ee,lt),o(s,Bl,l),d(Ms,s,l),o(s,be,l),n(be,at),o(s,cl,l),o(s,H,l),d(ps,H,null),n(H,tt),o(s,il,l),o(s,rs,l),n(rs,ot),n(rs,sn),n(sn,pt),n(rs,rt),o(s,yl,l),d(Hs,s,l),o(s,ve,l),n(ve,Bt),o(s,ul,l),d(Ls,s,l),o(s,Bs,l),n(Bs,ct),n(Bs,en),n(en,it),n(Bs,yt),o(s,fl,l),d(zs,s,l),o(s,L,l),d(cs,L,null),n(L,ut),o(s,ml,l),o(s,_e,l),n(_e,ft),o(s,dl,l),o(s,ge,l),n(ge,nn),n(nn,mt),o(s,Fl,l),d(js,s,l),o(s,Qs,l),n(Qs,ln),n(ln,dt),n(Qs,Ft),o(s,Al,l),d(Ys,s,l),o(s,qe,l),n(qe,At),o(s,$l,l),d(Ws,s,l),o(s,z,l),d(is,z,null),n(z,$t),o(s,Cl,l),o(s,we,l),n(we,an),n(an,Ct),o(s,Dl,l),o(s,ys,l),n(ys,Dt),d(us,ys,null),n(ys,ht),o(s,hl,l),o(s,Te,l),n(Te,Et),o(s,El,l),d(Vs,s,l),o(s,Pe,l),n(Pe,tn),n(tn,bt),o(s,bl,l),o(s,fs,l),n(fs,vt),n(fs,on),n(on,_t),n(fs,gt),o(s,vl,l),o(s,h,l),n(h,pn),n(pn,qt),n(h,wt),n(h,rn),n(rn,Tt),n(h,Pt),n(h,Bn),n(Bn,St),n(h,Rt),n(h,cn),n(cn,xt),n(h,It),n(h,yn),n(yn,Ot),n(h,kt),n(h,un),n(un,Nt),n(h,Gt),n(h,fn),n(fn,Ut),n(h,Jt),n(h,mn),n(mn,Mt),n(h,Ht),n(h,dn),n(dn,Lt),n(h,zt),n(h,Fn),n(Fn,jt),n(h,Qt),n(h,An),n(An,Yt),n(h,Wt),n(h,$n),n($n,Vt),o(s,_l,l),o(s,ms,l),n(ms,Xt),n(ms,Cn),n(Cn,Kt),n(ms,Zt),o(s,gl,l),d(Xs,s,l),o(s,O,l),n(O,so),n(O,Dn),n(Dn,eo),n(O,no),n(O,hn),n(hn,lo),n(O,ao),o(s,ql,l),o(s,ds,l),n(ds,to),n(ds,En),n(En,oo),n(ds,po),o(s,wl,l),o(s,Se,l),n(Se,ro),o(s,Tl,l),d(Ks,s,l),d(Zs,s,l),o(s,Re,l),n(Re,Bo),o(s,Pl,l),o(s,xe,l),n(xe,co),o(s,Sl,l),o(s,Ie,l),n(Ie,io),o(s,Rl,l),o(s,j,l),d(Fs,j,null),n(j,yo),o(s,xl,l),o(s,k,l),n(k,uo),n(k,bn),n(bn,fo),n(k,mo),n(k,vn),n(vn,Fo),n(k,Ao),o(s,Il,l),d(se,s,l),d(As,s,l),o(s,Ol,l),d(ee,s,l),o(s,Q,l),d($s,Q,null),n(Q,$o),o(s,kl,l),o(s,Cs,l),n(Cs,Co),n(Cs,_n),n(_n,Do),n(Cs,ho),o(s,Nl,l),d(ne,s,l),o(s,Ds,l),n(Ds,Eo),n(Ds,gn),n(gn,bo),n(Ds,vo),o(s,Gl,l),o(s,Oe,l),n(Oe,_o),o(s,Ul,l),o(s,ke,l),n(ke,go),o(s,Jl,l),o(s,Y,l),d(hs,Y,null),n(Y,qo),o(s,Ml,l),o(s,Ne,l),n(Ne,wo),o(s,Hl,l),o(s,Es,l),n(Es,To),d(bs,Es,null),n(Es,Po),o(s,Ll,l),o(s,W,l),d(vs,W,null),n(W,So),o(s,zl,l),o(s,_s,l),n(_s,Ro),n(_s,qn),n(qn,xo),n(_s,Io),o(s,jl,l),o(s,le,l),n(le,wn),n(wn,Oo),n(le,ko),o(s,Ql,l),d(ae,s,l),o(s,te,l),n(te,Tn),n(Tn,No),n(te,Go),o(s,Yl,l),d(oe,s,l),Pn=!0},p(s,[l]){(!Pn||l&1)&&c!==(c=s[0].title+"")&&yr(C,c);const Ge={};l&2&&(Ge.$$scope={dirty:l,ctx:s}),R.$set(Ge);const Sn={};l&2&&(Sn.$$scope={dirty:l,ctx:s}),es.$set(Sn);const g={};l&2&&(g.$$scope={dirty:l,ctx:s}),as.$set(g);const Rn={};l&2&&(Rn.$$scope={dirty:l,ctx:s}),os.$set(Rn);const xn={};l&2&&(xn.$$scope={dirty:l,ctx:s}),ps.$set(xn);const In={};l&2&&(In.$$scope={dirty:l,ctx:s}),cs.$set(In);const On={};l&2&&(On.$$scope={dirty:l,ctx:s}),is.$set(On);const pe={};l&2&&(pe.$$scope={dirty:l,ctx:s}),us.$set(pe);const kn={};l&2&&(kn.$$scope={dirty:l,ctx:s}),Fs.$set(kn);const re={};l&2&&(re.$$scope={dirty:l,ctx:s}),As.$set(re);const Nn={};l&2&&(Nn.$$scope={dirty:l,ctx:s}),$s.$set(Nn);const Be={};l&2&&(Be.$$scope={dirty:l,ctx:s}),hs.$set(Be);const Gn={};l&2&&(Gn.$$scope={dirty:l,ctx:s}),bs.$set(Gn);const Un={};l&2&&(Un.$$scope={dirty:l,ctx:s}),vs.$set(Un)},i(s){Pn||(F(R.$$.fragment,s),F(Ss.$$.fragment,s),F(Rs.$$.fragment,s),F(xs.$$.fragment,s),F(Is.$$.fragment,s),F(es.$$.fragment,s),F(Os.$$.fragment,s),F(ks.$$.fragment,s),F(Ns.$$.fragment,s),F(as.$$.fragment,s),F(Gs.$$.fragment,s),F(Us.$$.fragment,s),F(Js.$$.fragment,s),F(os.$$.fragment,s),F(Ms.$$.fragment,s),F(ps.$$.fragment,s),F(Hs.$$.fragment,s),F(Ls.$$.fragment,s),F(zs.$$.fragment,s),F(cs.$$.fragment,s),F(js.$$.fragment,s),F(Ys.$$.fragment,s),F(Ws.$$.fragment,s),F(is.$$.fragment,s),F(us.$$.fragment,s),F(Vs.$$.fragment,s),F(Xs.$$.fragment,s),F(Ks.$$.fragment,s),F(Zs.$$.fragment,s),F(Fs.$$.fragment,s),F(se.$$.fragment,s),F(As.$$.fragment,s),F(ee.$$.fragment,s),F($s.$$.fragment,s),F(ne.$$.fragment,s),F(hs.$$.fragment,s),F(bs.$$.fragment,s),F(vs.$$.fragment,s),F(ae.$$.fragment,s),F(oe.$$.fragment,s),Pn=!0)},o(s){A(R.$$.fragment,s),A(Ss.$$.fragment,s),A(Rs.$$.fragment,s),A(xs.$$.fragment,s),A(Is.$$.fragment,s),A(es.$$.fragment,s),A(Os.$$.fragment,s),A(ks.$$.fragment,s),A(Ns.$$.fragment,s),A(as.$$.fragment,s),A(Gs.$$.fragment,s),A(Us.$$.fragment,s),A(Js.$$.fragment,s),A(os.$$.fragment,s),A(Ms.$$.fragment,s),A(ps.$$.fragment,s),A(Hs.$$.fragment,s),A(Ls.$$.fragment,s),A(zs.$$.fragment,s),A(cs.$$.fragment,s),A(js.$$.fragment,s),A(Ys.$$.fragment,s),A(Ws.$$.fragment,s),A(is.$$.fragment,s),A(us.$$.fragment,s),A(Vs.$$.fragment,s),A(Xs.$$.fragment,s),A(Ks.$$.fragment,s),A(Zs.$$.fragment,s),A(Fs.$$.fragment,s),A(se.$$.fragment,s),A(As.$$.fragment,s),A(ee.$$.fragment,s),A($s.$$.fragment,s),A(ne.$$.fragment,s),A(hs.$$.fragment,s),A(bs.$$.fragment,s),A(vs.$$.fragment,s),A(ae.$$.fragment,s),A(oe.$$.fragment,s),Pn=!1},d(s){s&&e(i),s&&e(x),s&&e(q),$(R),s&&e(N),s&&e(w),s&&e(I),s&&e(v),s&&e(Mn),s&&e(ie),s&&e(Hn),$(Ss,s),s&&e(ye),s&&e(Ln),$(Rs,s),s&&e(ue),s&&e(zn),s&&e(Z),s&&e(jn),$(xs,s),s&&e(fe),s&&e(Qn),s&&e(me),s&&e(Yn),s&&e(de),s&&e(Wn),$(Is,s),s&&e(Fe),s&&e(Vn),s&&e(ss),$(es),s&&e(Xn),s&&e(Ae),s&&e(Kn),$(Os,s),s&&e(U),s&&e(Zn),s&&e(ns),s&&e(sl),$(ks,s),s&&e(ls),s&&e(el),s&&e($e),s&&e(nl),$(Ns,s),s&&e(J),$(as),s&&e(ll),s&&e(Ce),s&&e(al),$(Gs,s),$(Us,s),s&&e(ts),s&&e(tl),s&&e(De),s&&e(ol),s&&e(he),s&&e(pl),$(Js,s),s&&e(M),$(os),s&&e(rl),s&&e(Ee),s&&e(Bl),$(Ms,s),s&&e(be),s&&e(cl),s&&e(H),$(ps),s&&e(il),s&&e(rs),s&&e(yl),$(Hs,s),s&&e(ve),s&&e(ul),$(Ls,s),s&&e(Bs),s&&e(fl),$(zs,s),s&&e(L),$(cs),s&&e(ml),s&&e(_e),s&&e(dl),s&&e(ge),s&&e(Fl),$(js,s),s&&e(Qs),s&&e(Al),$(Ys,s),s&&e(qe),s&&e($l),$(Ws,s),s&&e(z),$(is),s&&e(Cl),s&&e(we),s&&e(Dl),s&&e(ys),$(us),s&&e(hl),s&&e(Te),s&&e(El),$(Vs,s),s&&e(Pe),s&&e(bl),s&&e(fs),s&&e(vl),s&&e(h),s&&e(_l),s&&e(ms),s&&e(gl),$(Xs,s),s&&e(O),s&&e(ql),s&&e(ds),s&&e(wl),s&&e(Se),s&&e(Tl),$(Ks,s),$(Zs,s),s&&e(Re),s&&e(Pl),s&&e(xe),s&&e(Sl),s&&e(Ie),s&&e(Rl),s&&e(j),$(Fs),s&&e(xl),s&&e(k),s&&e(Il),$(se,s),$(As,s),s&&e(Ol),$(ee,s),s&&e(Q),$($s),s&&e(kl),s&&e(Cs),s&&e(Nl),$(ne,s),s&&e(Ds),s&&e(Gl),s&&e(Oe),s&&e(Ul),s&&e(ke),s&&e(Jl),s&&e(Y),$(hs),s&&e(Ml),s&&e(Ne),s&&e(Hl),s&&e(Es),$(bs),s&&e(Ll),s&&e(W),$(vs),s&&e(zl),s&&e(_s),s&&e(jl),s&&e(le),s&&e(Ql),$(ae,s),s&&e(te),s&&e(Yl),$(oe,s)}}}function Sr(D,i,c){let C;return ur(D,mr,x=>c(0,C=x)),[C]}class Ur extends Br{constructor(i){super(),cr(this,i,Sr,Pr,ir,{})}}export{Ur as default};
