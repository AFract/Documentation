import{S as Dn,i as hn,s as gn,l as c,r as p,a as y,w as d,m as B,n as i,u as t,h as n,c as F,x as u,p as E,b as l,M as r,y as $,v as _n,f as C,t as v,B as m,_ as bn}from"../../chunks/index-98cfa7ad.js";import{f as wn}from"../../chunks/scroll-1be19199.js";import{C as S}from"../../chunks/CodeFence-182ee1eb.js";import{L as rs}from"../../chunks/Link-76ffd583.js";import"../../chunks/singletons-9aa31187.js";import"../../chunks/contexts-ec7bfa4f.js";function Sn(f){let o;return{c(){o=p("#")},l(a){o=t(a,"#")},m(a,A){l(a,o,A)},d(a){a&&n(o)}}}function kn(f){let o;return{c(){o=p("#")},l(a){o=t(a,"#")},m(a,A){l(a,o,A)},d(a){a&&n(o)}}}function Hn(f){let o;return{c(){o=p("#")},l(a){o=t(a,"#")},m(a,A){l(a,o,A)},d(a){a&&n(o)}}}function In(f){let o;return{c(){o=p("#")},l(a){o=t(a,"#")},m(a,A){l(a,o,A)},d(a){a&&n(o)}}}function Tn(f){let o;return{c(){o=p("#")},l(a){o=t(a,"#")},m(a,A){l(a,o,A)},d(a){a&&n(o)}}}function Rn(f){let o;return{c(){o=p("#")},l(a){o=t(a,"#")},m(a,A){l(a,o,A)},d(a){a&&n(o)}}}function jn(f){let o,a=f[0].title+"",A,Y,D,k,qs,us,U,Ps,$s,x,z,cs,Ws,Cs,q,h,H,Ms,vs,K,Os,ms,P,g,I,Ls,Es,Q,Vs,Ds,W,_,T,Gs,hs,X,Ns,gs,M,O,Bs,Js,Ys,_s,L,is,Us,zs,bs,b,R,Ks,ws,Z,Qs,Ss,V,ss,Xs,ks,G,w,j,Zs,Hs,ns,sn,Is,es,nn,Ts,ls,en,Rs,as,ln,js,N,os,an,xs,J,ys;return k=new rs({props:{class:"header-anchor",href:"#dependency-injection","aria-hidden":"true",$$slots:{default:[Sn]},$$scope:{ctx:f}}}),x=new S({props:{title:"HelloWorldService.cs",lang:"csharp",ext:"cs",linesCount:10,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">interface</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">IHelloWorldService</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">SayHello</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">HelloWorldService</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">IHelloWorldService</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">SayHello</span><span style="color: #ABB2BF">() =&gt; </span><span style="color: #98C379">&quot;hello world!&quot;</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),q=new S({props:{title:"Program.cs",lang:"csharp",ext:"cs",linesCount:2,code:`<pre><code><span class="line"><span style="color: #E5C07B">builder</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Services</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">AddScoped</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">IHelloWorldService</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">HelloWorldService</span><span style="color: #ABB2BF">&gt;();</span></span>
<span class="line"></span></code></pre>`}}),H=new rs({props:{class:"header-anchor",href:"#property-injection","aria-hidden":"true",$$slots:{default:[kn]},$$scope:{ctx:f}}}),P=new S({props:{title:"MyEndpoint.cs",lang:"csharp",ext:"cs",linesCount:16,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyEndpoint</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">EndpointWithoutRequest</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">IHelloWorldService</span><span style="color: #ABB2BF"> HelloService { </span><span style="color: #C678DD">get</span><span style="color: #ABB2BF">; </span><span style="color: #C678DD">set</span><span style="color: #ABB2BF">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Verbs</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">Http</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">GET</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Routes</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/api/hello-world&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">SendAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">HelloService</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">SayHello</span><span style="color: #ABB2BF">());</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),I=new rs({props:{class:"header-anchor",href:"#constructor-injection","aria-hidden":"true",$$slots:{default:[Hn]},$$scope:{ctx:f}}}),W=new S({props:{title:"MyEndpoint.cs",lang:"csharp",ext:"cs",linesCount:22,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyEndpoint</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">EndpointWithoutRequest</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">private</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">IHelloWorldService</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">_helloService</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">MyEndpoint</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">IHelloWorldService</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">helloScv</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E06C75">_helloService</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">helloScv</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Verbs</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">Http</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">GET</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">Routes</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/api/hello-world&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">SendAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">_helloService</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">SayHello</span><span style="color: #ABB2BF">());</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre>`}}),T=new rs({props:{class:"header-anchor",href:"#manual-resolving","aria-hidden":"true",$$slots:{default:[In]},$$scope:{ctx:f}}}),M=new S({props:{lang:"csharp",ext:"cs",linesCount:14,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">IHelloWorldService</span><span style="color: #ABB2BF">? </span><span style="color: #E06C75">helloSvc</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">TryResolve</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">IHelloWorldService</span><span style="color: #ABB2BF">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75">helloSvc</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">is</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">null</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #61AFEF">ThrowError</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;service not resolved!&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">logger</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Resolve</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">ILogger</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">MyEndpoint</span><span style="color: #ABB2BF">&gt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">logger</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">LogInformation</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;hello service is resolved...&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">SendAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">helloSvc</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">SayHello</span><span style="color: #ABB2BF">());</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),R=new rs({props:{class:"header-anchor",href:"#pre-resolved-services","aria-hidden":"true",$$slots:{default:[Tn]},$$scope:{ctx:f}}}),V=new S({props:{lang:"text",ext:"text",linesCount:9,code:`<pre><code><span class="line"><span style="color: undefined">property: Config</span></span>
<span class="line"><span style="color: undefined">service : IConfiguration</span></span>
<span class="line"><span style="color: undefined"></span></span>
<span class="line"><span style="color: undefined">property: Env</span></span>
<span class="line"><span style="color: undefined">service : IWebHostEnvironment</span></span>
<span class="line"><span style="color: undefined"></span></span>
<span class="line"><span style="color: undefined">property: Logger</span></span>
<span class="line"><span style="color: undefined">service : ILogger</span></span>
<span class="line"><span style="color: undefined"></span></span></code></pre>`}}),G=new S({props:{lang:"csharp",ext:"cs",linesCount:8,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Task</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">HandleAsync</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">CancellationToken</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ct</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">Logger</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">LogInformation</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;this is a log message&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">isProduction</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Env</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">IsProduction</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">var</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">smtpServer</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Config</span><span style="color: #ABB2BF">[</span><span style="color: #98C379">&quot;SMTP:HostName&quot;</span><span style="color: #ABB2BF">];</span></span>
<span class="line"><span style="color: #ABB2BF">    ...</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),j=new rs({props:{class:"header-anchor",href:"#dependency-resolving-for-validators","aria-hidden":"true",$$slots:{default:[Rn]},$$scope:{ctx:f}}}),N=new S({props:{lang:"csharp",ext:"cs",linesCount:6,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">override</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">void</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Configure</span><span style="color: #ABB2BF">()</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">Get</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/hello-world&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #61AFEF">ScopedValidator</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),J=new S({props:{lang:"csharp",ext:"cs",linesCount:11,code:`<pre><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">class</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">MyValidator</span><span style="color: #ABB2BF"> : </span><span style="color: #E5C07B">Validator</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">MyRequest</span><span style="color: #ABB2BF">&gt;</span></span>
<span class="line"><span style="color: #ABB2BF">{</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">public</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">MyValidator</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">IConfiguration</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">config</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">    {</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75">config</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">is</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">null</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">        {</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">throw</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ArgumentNullException</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">nameof</span><span style="color: #ABB2BF">(</span><span style="color: #E06C75">config</span><span style="color: #ABB2BF">));</span></span>
<span class="line"><span style="color: #ABB2BF">        }</span></span>
<span class="line"><span style="color: #ABB2BF">    }</span></span>
<span class="line"><span style="color: #ABB2BF">}</span></span>
<span class="line"></span></code></pre>`}}),{c(){o=c("h1"),A=p(a),Y=y(),D=c("h2"),d(k.$$.fragment),qs=p(" Dependency Injection"),us=y(),U=c("p"),Ps=p(`There are three different ways to get access to services registered in the IOC container.
Consider the following service registration.`),$s=y(),d(x.$$.fragment),z=c("p"),cs=c("strong"),Ws=p("IOC Registration"),Cs=y(),d(q.$$.fragment),h=c("h2"),d(H.$$.fragment),Ms=p(" Property Injection"),vs=y(),K=c("p"),Os=p("Services can be automatically property injected by simply adding properties to the endpoint like so:"),ms=y(),d(P.$$.fragment),g=c("h2"),d(I.$$.fragment),Ls=p(" Constructor Injection"),Es=y(),Q=c("p"),Vs=p("Constructor injection is also supported. Just make sure not to assign the injected dependencies to public properties if using together with property injection."),Ds=y(),d(W.$$.fragment),_=c("h2"),d(T.$$.fragment),Gs=p(" Manual Resolving"),hs=y(),X=c("p"),Ns=p("Services can be resolved manually like so:"),gs=y(),d(M.$$.fragment),O=c("p"),Bs=c("strong"),Js=p("TryResolve()"),Ys=p(" - This method will try to resolve the given service. returns null if not resolved."),_s=y(),L=c("p"),is=c("strong"),Us=p("Resolve()"),zs=p(" - This method will throw an exception if the requested service cannot be resolved."),bs=y(),b=c("h2"),d(R.$$.fragment),Ks=p(" Pre-Resolved Services"),ws=y(),Z=c("p"),Qs=p("The following services are pre-resolved and available for every endpoint handler with the following properties:"),Ss=y(),d(V.$$.fragment),ss=c("p"),Xs=p("They can be used in the endpoint handlers like so:"),ks=y(),d(G.$$.fragment),w=c("h2"),d(j.$$.fragment),Zs=p(" Dependency Resolving For Validators"),Hs=y(),ns=c("p"),sn=p("By default, validators are registered in the DI container as singletons for performance reasons."),Is=y(),es=c("p"),nn=p("Both the above-mentioned Resolve() and TryResolve() methods are available for validators to get access to the dependencies it needs."),Ts=y(),ls=c("p"),en=p("You should also take care not to maintain state in the validator due to it being singleton scope."),Rs=y(),as=c("p"),ln=p("If for some reason you don't mind paying the performance penalty and would like to either maintain state in the validator or would like to do constructor injection, you may do so by instructing the endpoint to register the validator as a scoped dependency like so:"),js=y(),d(N.$$.fragment),os=c("p"),an=p("Once you enable the validator to be registered as a Scoped dependency, you can use constructor injection on the validator like so:"),xs=y(),d(J.$$.fragment),this.h()},l(s){o=B(s,"H1",{});var e=i(o);A=t(e,a),e.forEach(n),Y=F(s),D=B(s,"H2",{id:!0,tabindex:!0});var ps=i(D);u(k.$$.fragment,ps),qs=t(ps," Dependency Injection"),ps.forEach(n),us=F(s),U=B(s,"P",{});var Fs=i(U);Ps=t(Fs,`There are three different ways to get access to services registered in the IOC container.
Consider the following service registration.`),Fs.forEach(n),$s=F(s),u(x.$$.fragment,s),z=B(s,"P",{});var As=i(z);cs=B(As,"STRONG",{});var fs=i(cs);Ws=t(fs,"IOC Registration"),fs.forEach(n),As.forEach(n),Cs=F(s),u(q.$$.fragment,s),h=B(s,"H2",{id:!0,tabindex:!0});var ts=i(h);u(H.$$.fragment,ts),Ms=t(ts," Property Injection"),ts.forEach(n),vs=F(s),K=B(s,"P",{});var ds=i(K);Os=t(ds,"Services can be automatically property injected by simply adding properties to the endpoint like so:"),ds.forEach(n),ms=F(s),u(P.$$.fragment,s),g=B(s,"H2",{id:!0,tabindex:!0});var on=i(g);u(I.$$.fragment,on),Ls=t(on," Constructor Injection"),on.forEach(n),Es=F(s),Q=B(s,"P",{});var yn=i(Q);Vs=t(yn,"Constructor injection is also supported. Just make sure not to assign the injected dependencies to public properties if using together with property injection."),yn.forEach(n),Ds=F(s),u(W.$$.fragment,s),_=B(s,"H2",{id:!0,tabindex:!0});var pn=i(_);u(T.$$.fragment,pn),Gs=t(pn," Manual Resolving"),pn.forEach(n),hs=F(s),X=B(s,"P",{});var Fn=i(X);Ns=t(Fn,"Services can be resolved manually like so:"),Fn.forEach(n),gs=F(s),u(M.$$.fragment,s),O=B(s,"P",{});var tn=i(O);Bs=B(tn,"STRONG",{});var An=i(Bs);Js=t(An,"TryResolve()"),An.forEach(n),Ys=t(tn," - This method will try to resolve the given service. returns null if not resolved."),tn.forEach(n),_s=F(s),L=B(s,"P",{});var rn=i(L);is=B(rn,"STRONG",{});var fn=i(is);Us=t(fn,"Resolve()"),fn.forEach(n),zs=t(rn," - This method will throw an exception if the requested service cannot be resolved."),rn.forEach(n),bs=F(s),b=B(s,"H2",{id:!0,tabindex:!0});var cn=i(b);u(R.$$.fragment,cn),Ks=t(cn," Pre-Resolved Services"),cn.forEach(n),ws=F(s),Z=B(s,"P",{});var dn=i(Z);Qs=t(dn,"The following services are pre-resolved and available for every endpoint handler with the following properties:"),dn.forEach(n),Ss=F(s),u(V.$$.fragment,s),ss=B(s,"P",{});var un=i(ss);Xs=t(un,"They can be used in the endpoint handlers like so:"),un.forEach(n),ks=F(s),u(G.$$.fragment,s),w=B(s,"H2",{id:!0,tabindex:!0});var Bn=i(w);u(j.$$.fragment,Bn),Zs=t(Bn," Dependency Resolving For Validators"),Bn.forEach(n),Hs=F(s),ns=B(s,"P",{});var $n=i(ns);sn=t($n,"By default, validators are registered in the DI container as singletons for performance reasons."),$n.forEach(n),Is=F(s),es=B(s,"P",{});var Cn=i(es);nn=t(Cn,"Both the above-mentioned Resolve() and TryResolve() methods are available for validators to get access to the dependencies it needs."),Cn.forEach(n),Ts=F(s),ls=B(s,"P",{});var vn=i(ls);en=t(vn,"You should also take care not to maintain state in the validator due to it being singleton scope."),vn.forEach(n),Rs=F(s),as=B(s,"P",{});var mn=i(as);ln=t(mn,"If for some reason you don't mind paying the performance penalty and would like to either maintain state in the validator or would like to do constructor injection, you may do so by instructing the endpoint to register the validator as a scoped dependency like so:"),mn.forEach(n),js=F(s),u(N.$$.fragment,s),os=B(s,"P",{});var En=i(os);an=t(En,"Once you enable the validator to be registered as a Scoped dependency, you can use constructor injection on the validator like so:"),En.forEach(n),xs=F(s),u(J.$$.fragment,s),this.h()},h(){E(D,"id","dependency-injection"),E(D,"tabindex","-1"),E(h,"id","property-injection"),E(h,"tabindex","-1"),E(g,"id","constructor-injection"),E(g,"tabindex","-1"),E(_,"id","manual-resolving"),E(_,"tabindex","-1"),E(b,"id","pre-resolved-services"),E(b,"tabindex","-1"),E(w,"id","dependency-resolving-for-validators"),E(w,"tabindex","-1")},m(s,e){l(s,o,e),r(o,A),l(s,Y,e),l(s,D,e),$(k,D,null),r(D,qs),l(s,us,e),l(s,U,e),r(U,Ps),l(s,$s,e),$(x,s,e),l(s,z,e),r(z,cs),r(cs,Ws),l(s,Cs,e),$(q,s,e),l(s,h,e),$(H,h,null),r(h,Ms),l(s,vs,e),l(s,K,e),r(K,Os),l(s,ms,e),$(P,s,e),l(s,g,e),$(I,g,null),r(g,Ls),l(s,Es,e),l(s,Q,e),r(Q,Vs),l(s,Ds,e),$(W,s,e),l(s,_,e),$(T,_,null),r(_,Gs),l(s,hs,e),l(s,X,e),r(X,Ns),l(s,gs,e),$(M,s,e),l(s,O,e),r(O,Bs),r(Bs,Js),r(O,Ys),l(s,_s,e),l(s,L,e),r(L,is),r(is,Us),r(L,zs),l(s,bs,e),l(s,b,e),$(R,b,null),r(b,Ks),l(s,ws,e),l(s,Z,e),r(Z,Qs),l(s,Ss,e),$(V,s,e),l(s,ss,e),r(ss,Xs),l(s,ks,e),$(G,s,e),l(s,w,e),$(j,w,null),r(w,Zs),l(s,Hs,e),l(s,ns,e),r(ns,sn),l(s,Is,e),l(s,es,e),r(es,nn),l(s,Ts,e),l(s,ls,e),r(ls,en),l(s,Rs,e),l(s,as,e),r(as,ln),l(s,js,e),$(N,s,e),l(s,os,e),r(os,an),l(s,xs,e),$(J,s,e),ys=!0},p(s,[e]){(!ys||e&1)&&a!==(a=s[0].title+"")&&_n(A,a);const ps={};e&2&&(ps.$$scope={dirty:e,ctx:s}),k.$set(ps);const Fs={};e&2&&(Fs.$$scope={dirty:e,ctx:s}),H.$set(Fs);const As={};e&2&&(As.$$scope={dirty:e,ctx:s}),I.$set(As);const fs={};e&2&&(fs.$$scope={dirty:e,ctx:s}),T.$set(fs);const ts={};e&2&&(ts.$$scope={dirty:e,ctx:s}),R.$set(ts);const ds={};e&2&&(ds.$$scope={dirty:e,ctx:s}),j.$set(ds)},i(s){ys||(C(k.$$.fragment,s),C(x.$$.fragment,s),C(q.$$.fragment,s),C(H.$$.fragment,s),C(P.$$.fragment,s),C(I.$$.fragment,s),C(W.$$.fragment,s),C(T.$$.fragment,s),C(M.$$.fragment,s),C(R.$$.fragment,s),C(V.$$.fragment,s),C(G.$$.fragment,s),C(j.$$.fragment,s),C(N.$$.fragment,s),C(J.$$.fragment,s),ys=!0)},o(s){v(k.$$.fragment,s),v(x.$$.fragment,s),v(q.$$.fragment,s),v(H.$$.fragment,s),v(P.$$.fragment,s),v(I.$$.fragment,s),v(W.$$.fragment,s),v(T.$$.fragment,s),v(M.$$.fragment,s),v(R.$$.fragment,s),v(V.$$.fragment,s),v(G.$$.fragment,s),v(j.$$.fragment,s),v(N.$$.fragment,s),v(J.$$.fragment,s),ys=!1},d(s){s&&n(o),s&&n(Y),s&&n(D),m(k),s&&n(us),s&&n(U),s&&n($s),m(x,s),s&&n(z),s&&n(Cs),m(q,s),s&&n(h),m(H),s&&n(vs),s&&n(K),s&&n(ms),m(P,s),s&&n(g),m(I),s&&n(Es),s&&n(Q),s&&n(Ds),m(W,s),s&&n(_),m(T),s&&n(hs),s&&n(X),s&&n(gs),m(M,s),s&&n(O),s&&n(_s),s&&n(L),s&&n(bs),s&&n(b),m(R),s&&n(ws),s&&n(Z),s&&n(Ss),m(V,s),s&&n(ss),s&&n(ks),m(G,s),s&&n(w),m(j),s&&n(Hs),s&&n(ns),s&&n(Is),s&&n(es),s&&n(Ts),s&&n(ls),s&&n(Rs),s&&n(as),s&&n(js),m(N,s),s&&n(os),s&&n(xs),m(J,s)}}}function xn(f,o,a){let A;return bn(f,wn,Y=>a(0,A=Y)),[A]}class Vn extends Dn{constructor(o){super(),hn(this,o,xn,jn,gn,{})}}export{Vn as default};
